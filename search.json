[{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":null,"dir":"","previous_headings":"","what":"Changelog","title":"Changelog","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"fixed","dir":"","previous_headings":"[0.99.2] - 2025-07-31","what":"Fixed","title":"Changelog","text":"Fixed syntax error train_cell_type_classifier function seq_len(min)(...) incorrectly parenthesized Fixed vapply() calls build_fingerprints calculate_pathway_activities functions changing lapply() variable-length outputs Restored accidentally removed F1 score calculation block evaluate_cell_type_predictions function","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"changed","dir":"","previous_headings":"[0.99.2] - 2025-07-31","what":"Changed","title":"Changelog","text":"Improved code indentation compliance using styler package (reduced 12% 5% non-compliant lines) Achieved 0 ERRORS status BiocCheck validation GitHub Actions compatibility","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"added","dir":"","previous_headings":"[0.99.1] - 2025-07-04","what":"Added","title":"Changelog","text":"BiocCheck output folder pattern .Rbuildignore prevent build errors","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"fixed-1","dir":"","previous_headings":"[0.99.1] - 2025-07-04","what":"Fixed","title":"Changelog","text":"Fixed 1:n patterns examples, replaced seq_len() BiocCheck compliance Fixed code indentation issues using styler package (reduced 11% 7% non-compliant lines) Corrected SVM column name handling predict_by_svm() function","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"changed-1","dir":"","previous_headings":"[0.99.1] - 2025-07-04","what":"Changed","title":"Changelog","text":"Improved BiocCheck compliance, achieving 0 ERRORS status Updated documentation properly formatted examples","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"removed","dir":"","previous_headings":"[0.99.1] - 2025-07-04","what":"Removed","title":"Changelog","text":"Removed temporary helper scripts (fix_coding_practices.R, fix_sapply_todos.R)","code":""},{"path":[]},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"core-functionality","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Added","what":"Core Functionality","title":"Changelog","text":"Dual-mode main function scCulture() BUILD PREDICT modes BUILD Mode: Generate transferable transcriptomic fingerprints labeled training data PREDICT Mode: Apply pre-built fingerprints unlabeled datasets culture condition prediction KEGG pathway analysis biological interpretation feature extraction Similarity-based prediction algorithm using correlation-based matching Support Vector Machine (SVM) prediction automatic feature handling Prediction confidence scoring [0;1] edge case handling Transferable fingerprint files containing trained model culture media prediction, pathway data","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"data-integration","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Added","what":"Data Integration","title":"Changelog","text":"Support CSV 10X Genomics data formats without appropriate headers Seurat workflow integration Robust preprocessing pipeline normalization scaling Dimensionality reduction using PCA, UMAP, t-SNE Metadata handling automatic sample detection","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"user-interface","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Added","what":"User Interface","title":"Changelog","text":"Progress tracking minimal progress bars detailed status messages Parallel processing support computationally intensive tasks Comprehensive input validation informative error messages Verbose output options detailed analysis tracking Visualization compatibility custom plotting function plot_scCulture()","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"technical-infrastructure","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Added","what":"Technical Infrastructure","title":"Changelog","text":"Intelligent SVM fallback mechanism - automatically switches similarity-based predictions SVM fails prediction Seurat v5 layer compatibility proper layer detection handling Memory-efficient processing large single-cell datasets Cross-platform compatibility (Windows, macOS, Linux)","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"fixed-2","dir":"","previous_headings":"[0.99.0] - 2025-06-20","what":"Fixed","title":"Changelog","text":"None initial release","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"changed-2","dir":"","previous_headings":"[0.99.0] - 2025-06-20","what":"Changed","title":"Changelog","text":"None initial release","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"input-validation","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Security","what":"Input Validation","title":"Changelog","text":"Parameter type checking user inputs File existence validation processing Data format verification prevent processing errors Memory usage monitoring large dataset handling","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"documentation-date-discrepancy","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Known Issues","what":"Documentation Date Discrepancy","title":"Changelog","text":"DESCRIPTION file date error: Version 0.99.0 erroneously dated 2024-04-28 DESCRIPTION file instead correct date 2025-06-20. corrected version 0.99.1.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"svm-prediction-limitations","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Known Issues","what":"SVM Prediction Limitations","title":"Changelog","text":"Feature mismatch scenarios: SVM prediction may fail significant differences training prediction datasets (e.g., different gene coverage, pathway availability) Impact functionality: functionality maintained even SVM encounters issues, ensuring reliable predictions","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"technical-limitations","dir":"","previous_headings":"[0.99.0] - 2025-06-20 > Known Issues","what":"Technical Limitations","title":"Changelog","text":"Cross-dataset compatibility: Best results achieved training prediction datasets similar gene coverage KEGG pathway dependency: Requires KEGG pathway definitions optimal performance Seurat version compatibility: Optimized Seurat v4+ v5 layer compatibility","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"deprecated","dir":"","previous_headings":"[0.99.0] - 2025-06-20","what":"Deprecated","title":"Changelog","text":"None initial release","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/CHANGELOG.html","id":"removed-1","dir":"","previous_headings":"[0.99.0] - 2025-06-20","what":"Removed","title":"Changelog","text":"None initial release","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Advanced Usage of scCulturePredict","text":"vignette covers advanced usage scCulturePredict package, building basic concepts introduced introductory vignette. , explore sophisticated analyses, customization options, performance optimizations. library(ggplot2) library(parallel) library(doParallel) library(foreach)","code":"library(scCulturePredict) library(Seurat) library(dplyr) # Setup Example Data  We'll use the same example data as in the introduction vignette, but we'll process it differently:   ``` r # Get the path to example data data_dir <- system.file(\"extdata\", \"example_data\", package = \"scCulturePredict\")  # For demonstration purposes, create a mock Seurat object counts <- read.csv(file.path(data_dir, \"counts.csv\"), row.names = 1) metadata <- read.csv(file.path(data_dir, \"metadata.csv\"), row.names = 1) seurat_object <- CreateSeuratObject(counts = as.matrix(counts), meta.data = metadata)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"advanced-scumap-usage","dir":"Articles","previous_headings":"","what":"Advanced scumap() Usage","title":"Advanced Usage of scCulturePredict","text":"scumap() function provides several advanced options power users need control analysis pipeline want optimize performance large datasets.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"progress-tracking-and-parallel-processing","dir":"Articles","previous_headings":"Advanced scumap() Usage","what":"Progress Tracking and Parallel Processing","title":"Advanced Usage of scCulturePredict","text":"large datasets, can enable progress tracking parallel processing monitor speed analysis:","code":"# Advanced usage with all options results <- scumap(     data_dir = data_dir,     kegg_file = system.file(\"extdata\", \"kegg\", \"example_pathway.keg\", package = \"scCulturePredict\"),     output_dir = \"./advanced_results\",     experiment_id = \"advanced_analysis\",     progress = TRUE, # Show detailed progress bar     parallel = TRUE, # Enable parallel processing     n_cores = 4, # Use 4 CPU cores     perform_tsne = TRUE, # Include t-SNE analysis     use_shell_script = FALSE, # Use R-only data loading     verbose = TRUE # Detailed progress messages )  # The function returns comprehensive results str(results, max.level = 2)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"customizing-analysis-parameters","dir":"Articles","previous_headings":"Advanced scumap() Usage","what":"Customizing Analysis Parameters","title":"Advanced Usage of scCulturePredict","text":"can customize various aspects analysis modifying underlying functions:","code":"# Example: Custom analysis with modified parameters results_custom <- scumap(     data_dir = data_dir,     kegg_file = system.file(\"extdata\", \"kegg\", \"example_pathway.keg\", package = \"scCulturePredict\"),     output_dir = \"./custom_results\",     experiment_id = \"custom_analysis\",     progress = TRUE,     verbose = TRUE )  # Access and modify the Seurat object seurat_obj <- results_custom$seurat_object  # You can then run additional custom analyses on the results # For example, additional clustering or custom visualizations"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"batch-processing-multiple-datasets","dir":"Articles","previous_headings":"Advanced scumap() Usage","what":"Batch Processing Multiple Datasets","title":"Advanced Usage of scCulturePredict","text":"processing multiple datasets, can create wrapper function:","code":"# Function to process multiple datasets process_multiple_datasets <- function(datasets, kegg_file, base_output_dir) {     results_list <- list()      for (i in seq_along(datasets)) {         dataset_name <- names(datasets)[i]         data_path <- datasets[[i]]          cat(sprintf(\"Processing dataset %d/%d: %s\\n\", i, length(datasets), dataset_name))          # Create unique output directory for each dataset         output_dir <- file.path(base_output_dir, dataset_name)          # Run scumap analysis         results_list[[dataset_name]] <- scumap(             data_dir = data_path,             kegg_file = kegg_file,             output_dir = output_dir,             experiment_id = dataset_name,             progress = FALSE, # Disable progress bar for batch processing             parallel = TRUE,             verbose = FALSE # Reduce verbosity for batch processing         )     }      return(results_list) }  # Example usage (not run) # datasets <- list( #   \"experiment_1\" = \"/path/to/data1\", #   \"experiment_2\" = \"/path/to/data2\", #   \"experiment_3\" = \"/path/to/data3\" # ) # # batch_results <- process_multiple_datasets( #   datasets = datasets, #   kegg_file = \"pathway_file.keg\", #   base_output_dir = \"./batch_results\" # )"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"batch-effect-correction","dir":"Articles","previous_headings":"Advanced Preprocessing","what":"Batch Effect Correction","title":"Advanced Usage of scCulturePredict","text":"Batch effects can significantly impact single-cell analyses. , demonstrate correct batch effects:","code":"# Identify batch variable in metadata batch_var <- \"batch\"  # Run integration to correct for batch effects seurat_list <- SplitObject(seurat_object, split.by = batch_var)  # Normalize and identify variable features for each dataset independently seurat_list <- lapply(seurat_list, function(x) {     x <- NormalizeData(x)     x <- FindVariableFeatures(x, selection.method = \"vst\", nfeatures = 2000) })  # Select integration features features <- SelectIntegrationFeatures(object.list = seurat_list)  # Find integration anchors anchors <- FindIntegrationAnchors(     object.list = seurat_list,     anchor.features = features )  # Integrate data seurat_integrated <- IntegrateData(anchorset = anchors)  # Switch to integrated assay for downstream analysis DefaultAssay(seurat_integrated) <- \"integrated\"  # Standard preprocessing on integrated data seurat_integrated <- ScaleData(seurat_integrated) seurat_integrated <- RunPCA(seurat_integrated) seurat_integrated <- RunUMAP(seurat_integrated, dims = 1:30)  # Visualize results with batch variable p1 <- DimPlot(seurat_integrated, reduction = \"umap\", group.by = batch_var) p2 <- DimPlot(seurat_integrated, reduction = \"umap\", group.by = \"sample\") p1 + p2"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"custom-qc-and-filtering","dir":"Articles","previous_headings":"Advanced Preprocessing","what":"Custom QC and Filtering","title":"Advanced Usage of scCulturePredict","text":"stringent QC can improve downstream analyses:","code":"# Calculate QC metrics seurat_object[[\"percent_mito\"]] <- PercentageFeatureSet(seurat_object, pattern = \"^MT-\") seurat_object[[\"percent_ribo\"]] <- PercentageFeatureSet(seurat_object, pattern = \"^RP[SL]\")  # Visualize QC metrics VlnPlot(seurat_object,     features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent_mito\", \"percent_ribo\"),     ncol = 4, pt.size = 0.1 )  # Custom filtering seurat_filtered <- subset(seurat_object,     subset = nFeature_RNA > 500 &         nFeature_RNA < 5000 &         percent_mito < 15 &         percent_ribo > 5 )"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"custom-pathway-definition","dir":"Articles","previous_headings":"Advanced KEGG Pathway Analysis","what":"Custom Pathway Definition","title":"Advanced Usage of scCulturePredict","text":"can define custom pathways beyond standard KEGG pathways:","code":"# Define custom pathway gene sets custom_pathways <- list(     \"Custom_Pathway_1\" = c(\"ENSG00000001\", \"ENSG00000002\", \"ENSG00000003\"),     \"Custom_Pathway_2\" = c(\"ENSG00000004\", \"ENSG00000005\", \"ENSG00000006\"),     \"Custom_Pathway_3\" = c(\"ENSG00000007\", \"ENSG00000008\", \"ENSG00000009\") )  # Convert to format compatible with build_fingerprints custom_pathways_df <- data.frame(     pathway_id = rep(names(custom_pathways), sapply(custom_pathways, length)),     gene_id = unlist(custom_pathways) )  # Build custom pathway fingerprints custom_fingerprints <- build_custom_fingerprints(     seurat_object = seurat_object,     pathway_gene_map = custom_pathways_df,     verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"weighted-pathway-analysis","dir":"Articles","previous_headings":"Advanced KEGG Pathway Analysis","what":"Weighted Pathway Analysis","title":"Advanced Usage of scCulturePredict","text":"Incorporate gene importance weights pathway analysis:","code":"# Define gene weights (e.g., from differential expression analysis) gene_weights <- data.frame(     gene_id = rownames(seurat_object),     weight = runif(nrow(seurat_object), 0, 1) )  # Build weighted pathway fingerprints weighted_fingerprints <- build_weighted_fingerprints(     seurat_object = seurat_object,     kegg_data = kegg_data,     gene_weights = gene_weights,     verbose = TRUE )"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"parallel-processing","dir":"Articles","previous_headings":"Performance Optimization","what":"Parallel Processing","title":"Advanced Usage of scCulturePredict","text":"large datasets, parallel processing can significantly improve performance:","code":"# Set up parallel backend num_cores <- detectCores() - 1 registerDoParallel(cores = num_cores)  # Use parallel processing in pathway analysis pathway_matrix <- build_fingerprints(     seurat_object = seurat_object,     kegg_data = kegg_data,     use_parallel = TRUE,     num_cores = num_cores,     verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"memory-optimization","dir":"Articles","previous_headings":"Performance Optimization","what":"Memory Optimization","title":"Advanced Usage of scCulturePredict","text":"working large datasets, memory optimization crucial:","code":"# Process data in chunks chunk_size <- 1000 # cells per chunk cell_chunks <- split(     colnames(seurat_object),     ceiling(seq_along(colnames(seurat_object)) / chunk_size) )  # Process each chunk results_list <- list() for (i in seq_along(cell_chunks)) {     if (verbose) message(sprintf(\"Processing chunk %d of %d\", i, length(cell_chunks)))      # Subset data     chunk_obj <- subset(seurat_object, cells = cell_chunks[[i]])      # Process chunk     chunk_results <- process_chunk(chunk_obj)      # Store results     results_list[[i]] <- chunk_results      # Explicit garbage collection     gc() }  # Combine results combined_results <- combine_chunk_results(results_list)"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"ensemble-models","dir":"Articles","previous_headings":"Advanced Prediction Models","what":"Ensemble Models","title":"Advanced Usage of scCulturePredict","text":"Combine multiple prediction methods improved accuracy:","code":"# Create mock data for demonstration set.seed(42) pathway_matrix <- matrix(rnorm(30 * 10), nrow = 30, ncol = 10) rownames(pathway_matrix) <- paste0(\"Pathway\", 1:30) colnames(pathway_matrix) <- colnames(seurat_object)  signature_matrix <- matrix(rnorm(10 * 3), nrow = 10, ncol = 3) rownames(signature_matrix) <- paste0(\"Pathway\", 1:10) colnames(signature_matrix) <- c(\"A\", \"B\", \"C\")  # Run multiple prediction methods similarity_results <- predict_by_similarity(     pathway_matrix = pathway_matrix,     signature_matrix = signature_matrix )  svm_results <- predict_by_svm(     pathway_matrix = pathway_matrix,     seurat_object = seurat_object )  # Create an ensemble prediction ensemble_predictions <- create_ensemble_predictions(     seurat_object = seurat_object,     similarity_results = similarity_results,     svm_results = svm_results,     weights = c(similarity = 0.4, svm = 0.6) )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"custom-svm-parameters","dir":"Articles","previous_headings":"Advanced Prediction Models","what":"Custom SVM Parameters","title":"Advanced Usage of scCulturePredict","text":"Fine-tune SVM parameters optimal performance:","code":"# Create custom SVM prediction with optimized parameters custom_svm_results <- predict_by_svm_custom(     pathway_matrix = pathway_matrix,     seurat_object = seurat_object,     kernel = \"radial\",     cost = 10,     gamma = 0.1,     probability = TRUE,     cross_validation = 5 )"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"cross-validation-evaluation","dir":"Articles","previous_headings":"Advanced Evaluation","what":"Cross-validation Evaluation","title":"Advanced Usage of scCulturePredict","text":"Perform k-fold cross-validation robust evaluation:","code":"# Perform k-fold cross-validation k <- 5 cv_results <- cross_validate_predictions(     seurat_object = seurat_object,     pathway_matrix = pathway_matrix,     method = \"svm\",     k_folds = k,     stratify_by = \"sample\",     verbose = TRUE )  # Visualize cross-validation results cv_plot <- plot_cross_validation_results(     cv_results = cv_results,     metric = \"accuracy\",     title = \"5-fold Cross-validation Results\" ) print(cv_plot)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"advanced-metrics","dir":"Articles","previous_headings":"Advanced Evaluation","what":"Advanced Metrics","title":"Advanced Usage of scCulturePredict","text":"Calculate additional performance metrics:","code":"# Calculate advanced metrics advanced_metrics <- calculate_advanced_metrics(     true_labels = seurat_object$sample,     predicted_labels = svm_results$predictions,     predicted_probs = svm_results$probabilities,     metrics = c(\"auc\", \"precision\", \"recall\", \"f1\", \"kappa\", \"mcc\") )  # Create detailed metrics visualization metrics_plot <- create_evaluation_metrics_plot(     evaluation_results = advanced_metrics,     plot_type = \"metrics\",     title = \"Advanced Evaluation Metrics\" ) print(metrics_plot)"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"integration-with-singler","dir":"Articles","previous_headings":"Integration with Other Tools","what":"Integration with SingleR","title":"Advanced Usage of scCulturePredict","text":"Integrate SingleR reference-based cell type annotation:","code":"# Load required packages library(SingleR) library(celldex)  # Get reference dataset ref <- celldex::HumanPrimaryCellAtlasData()  # Run SingleR singler_results <- SingleR(     test = GetAssayData(seurat_object, slot = \"data\"),     ref = ref,     labels = ref$label.main )  # Add SingleR annotations to Seurat object seurat_object$singler_labels <- singler_results$labels  # Compare SingleR annotations with predicted conditions comparison_plot <- create_annotation_comparison_plot(     seurat_object = seurat_object,     singler_column = \"singler_labels\",     prediction_column = \"svm_prediction\",     title = \"SingleR vs SVM Predictions\" ) print(comparison_plot)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"integration-with-trajectory-analysis","dir":"Articles","previous_headings":"Integration with Other Tools","what":"Integration with Trajectory Analysis","title":"Advanced Usage of scCulturePredict","text":"Integrate trajectory analysis tools:","code":"# Load required packages library(slingshot) library(tradeSeq)  # Run trajectory analysis seurat_object <- RunPCA(seurat_object) seurat_object <- RunUMAP(seurat_object, dims = 1:30)  # Get UMAP embedding umap_embedding <- Embeddings(seurat_object, \"umap\")  # Get cluster info clusters <- seurat_object$seurat_clusters  # Run Slingshot slingshot_results <- slingshot(     data = umap_embedding,     clusterLabels = clusters )  # Visualize trajectory plot_trajectory <- function(umap_embedding, slingshot_results, color_by) {     plot_df <- data.frame(         UMAP_1 = umap_embedding[, 1],         UMAP_2 = umap_embedding[, 2],         color = color_by     )      # Create plot     p <- ggplot(plot_df, aes(x = UMAP_1, y = UMAP_2, color = color)) +         geom_point(size = 1) +         theme_minimal() +         labs(title = \"Trajectory Analysis\")      # Add trajectory lines     for (i in 1:length(slingshot_results@curves)) {         curve_points <- slingshot_results@curves[[i]]$s[slingshot_results@curves[[i]]$ord, ]         curve_df <- data.frame(             UMAP_1 = curve_points[, 1],             UMAP_2 = curve_points[, 2]         )         p <- p + geom_path(             data = curve_df, aes(x = UMAP_1, y = UMAP_2),             color = \"black\", size = 1         )     }      return(p) }  # Create trajectory plot traj_plot <- plot_trajectory(     umap_embedding = umap_embedding,     slingshot_results = slingshot_results,     color_by = seurat_object$sample ) print(traj_plot)"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"creating-a-custom-analysis-pipeline","dir":"Articles","previous_headings":"Pipeline Customization","what":"Creating a Custom Analysis Pipeline","title":"Advanced Usage of scCulturePredict","text":"Build customized analysis pipeline combines multiple steps:","code":"# Define custom pipeline function custom_analysis_pipeline <- function(     data_dir,     experiment_id,     kegg_file,     output_dir = \"results\",     use_parallel = FALSE,     num_cores = 1,     verbose = TRUE) {     # 1. Load data     if (verbose) message(\"1. Loading data...\")     seurat_object <- load_data(         data_dir = data_dir,         experiment_id = experiment_id,         verbose = verbose     )      # 2. Preprocess data     if (verbose) message(\"2. Preprocessing data...\")     seurat_object <- preprocess_data(         seurat_object = seurat_object,         verbose = verbose     )      # 3. Reduce dimensions     if (verbose) message(\"3. Reducing dimensions...\")     seurat_object <- reduce_dimensions(         seurat_object = seurat_object,         verbose = verbose     )      # 4. Perform pathway analysis     if (verbose) message(\"4. Performing pathway analysis...\")     kegg_data <- parse_kegg_keg(         kegg_file = kegg_file,         verbose = verbose     )      pathway_matrix <- build_fingerprints(         seurat_object = seurat_object,         kegg_data = kegg_data,         use_parallel = use_parallel,         num_cores = num_cores,         verbose = verbose     )      # 5. Create signature matrix     if (verbose) message(\"5. Creating signature matrix...\")     signature_matrix <- create_signature_matrix(         seurat_object = seurat_object,         pathway_matrix = pathway_matrix,         verbose = verbose     )      # 6. Make predictions     if (verbose) message(\"6. Making predictions...\")     similarity_results <- predict_by_similarity(         pathway_matrix = pathway_matrix,         signature_matrix = signature_matrix,         verbose = verbose     )      svm_results <- predict_by_svm(         pathway_matrix = pathway_matrix,         seurat_object = seurat_object,         verbose = verbose     )      # 7. Evaluate predictions     if (verbose) message(\"7. Evaluating predictions...\")     evaluation_results <- evaluate_predictions(seurat_object)      # 8. Create visualizations     if (verbose) message(\"8. Creating visualizations...\")     if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)      save_visualization_plots(         seurat_object = seurat_object,         evaluation_results = evaluation_results,         output_dir = output_dir,         prefix = experiment_id,         verbose = verbose     )      # 9. Return results     return(list(         seurat_object = seurat_object,         pathway_matrix = pathway_matrix,         signature_matrix = signature_matrix,         similarity_results = similarity_results,         svm_results = svm_results,         evaluation_results = evaluation_results     )) }  # Example usage (not run) # results <- custom_analysis_pipeline( #   data_dir = data_dir, #   experiment_id = \"example\", #   kegg_file = system.file(\"extdata\", \"kegg\", \"example_pathway.keg\", package = \"scCulturePredict\"), #   output_dir = \"custom_results\", #   use_parallel = TRUE, #   num_cores = 4, #   verbose = TRUE # )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Advanced Usage of scCulturePredict","text":"vignette demonstrated advanced usage scenarios scCulturePredict package, including batch effect correction, custom pathway analysis, performance optimization, advanced prediction models, integration single-cell analysis tools. techniques can help extract insights single-cell data customize analysis specific research questions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-advanced.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Advanced Usage of scCulturePredict","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4             Seurat_5.3.0            SeuratObject_5.1.0      #> [4] sp_2.2-0                scCulturePredict_0.99.1 BiocStyle_2.36.0        #>  #> loaded via a namespace (and not attached): #>   [1] deldir_2.0-4           pbapply_1.7-4          gridExtra_2.3          #>   [4] rlang_1.1.6            magrittr_2.0.3         RcppAnnoy_0.0.22       #>   [7] spatstat.geom_3.5-0    matrixStats_1.5.0      ggridges_0.5.6         #>  [10] compiler_4.5.1         png_0.1-8              systemfonts_1.2.3      #>  [13] vctrs_0.6.5            reshape2_1.4.4         stringr_1.5.1          #>  [16] pkgconfig_2.0.3        fastmap_1.2.0          promises_1.3.3         #>  [19] rmarkdown_2.29         ragg_1.4.0             purrr_1.1.0            #>  [22] xfun_0.52              cachem_1.1.0           jsonlite_2.0.0         #>  [25] goftest_1.2-3          later_1.4.2            spatstat.utils_3.1-5   #>  [28] irlba_2.3.5.1          parallel_4.5.1         cluster_2.1.8.1        #>  [31] R6_2.6.1               ica_1.0-3              spatstat.data_3.1-6    #>  [34] stringi_1.8.7          bslib_0.9.0            RColorBrewer_1.1-3     #>  [37] reticulate_1.43.0      spatstat.univar_3.1-4  parallelly_1.45.1      #>  [40] lmtest_0.9-40          jquerylib_0.1.4        scattermore_1.2        #>  [43] Rcpp_1.1.0             bookdown_0.43          knitr_1.50             #>  [46] tensor_1.5.1           future.apply_1.20.0    zoo_1.8-14             #>  [49] sctransform_0.4.2      httpuv_1.6.16          Matrix_1.7-3           #>  [52] splines_4.5.1          igraph_2.1.4           tidyselect_1.2.1       #>  [55] abind_1.4-8            yaml_2.3.10            spatstat.random_3.4-1  #>  [58] spatstat.explore_3.5-2 codetools_0.2-20       miniUI_0.1.2           #>  [61] listenv_0.9.1          plyr_1.8.9             lattice_0.22-7         #>  [64] tibble_3.3.0           shiny_1.11.1           ROCR_1.0-11            #>  [67] evaluate_1.0.4         Rtsne_0.17             future_1.67.0          #>  [70] fastDummies_1.7.5      desc_1.4.3             survival_3.8-3         #>  [73] polyclip_1.10-7        fitdistrplus_1.2-4     pillar_1.11.0          #>  [76] BiocManager_1.30.26    KernSmooth_2.23-26     plotly_4.11.0          #>  [79] generics_0.1.4         RcppHNSW_0.6.0         ggplot2_3.5.2          #>  [82] scales_1.4.0           globals_0.18.0         xtable_1.8-4           #>  [85] glue_1.8.0             lazyeval_0.2.2         tools_4.5.1            #>  [88] data.table_1.17.8      RSpectra_0.16-2        RANN_2.6.2             #>  [91] fs_1.6.6               dotCall64_1.2          cowplot_1.2.0          #>  [94] grid_4.5.1             tidyr_1.3.1            nlme_3.1-168           #>  [97] patchwork_1.3.1        cli_3.6.5              spatstat.sparse_3.1-0  #> [100] textshaping_1.0.1      spam_2.11-1            viridisLite_0.4.2      #> [103] uwot_0.2.3             gtable_0.3.6           sass_0.4.10            #> [106] digest_0.6.37          progressr_0.15.1       ggrepel_0.9.6          #> [109] htmlwidgets_1.6.4      farver_2.1.2           htmltools_0.5.8.1      #> [112] pkgdown_2.1.3          lifecycle_1.0.4        httr_1.4.7             #> [115] mime_0.13              MASS_7.3-65"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to scCulturePredict","text":"scCulturePredict comprehensive R package analyzing single-cell RNA-seq data focus predicting cell culture media transcriptomic profiles. package provides tools loading, preprocessing, analyzing single-cell data using pathway analysis dimensionality reduction techniques. vignette provides introduction core functionality scCulturePredict package demonstrates basic workflow using example data.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"features","dir":"Articles","previous_headings":"Introduction","what":"Features","title":"Introduction to scCulturePredict","text":"scCulturePredict package offers several key features: Data loading preprocessing robust error handling Dimensionality reduction using UMAP KEGG pathway analysis biological interpretation Prediction cell culture media using similarity-based machine learning approaches Evaluation visualization prediction results","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"from-bioconductor","dir":"Articles","previous_headings":"Installation","what":"From Bioconductor","title":"Introduction to scCulturePredict","text":"scCulturePredict package available Bioconductor can installed using following commands:","code":"# Package installation (for reference only - package should be installed separately): # if (!requireNamespace(\"BiocManager\", quietly = TRUE)) #     install.packages(\"BiocManager\") # BiocManager::install(\"scCulturePredict\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"from-github","dir":"Articles","previous_headings":"Installation","what":"From GitHub","title":"Introduction to scCulturePredict","text":"development version can installed directly GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"nccb/scCulturePredict\")"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"loading-the-package","dir":"Articles","previous_headings":"Getting Started","what":"Loading the Package","title":"Introduction to scCulturePredict","text":"","code":"library(scCulturePredict) library(Seurat) library(ggplot2)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"example-data","dir":"Articles","previous_headings":"Getting Started","what":"Example Data","title":"Introduction to scCulturePredict","text":"scCulturePredict comes example data two formats can accessed using system.file() function: CSV format - Simple comma-separated files counts matrix metadata 10X Genomics format - Industry standard format barcodes.tsv, features.tsv, matrix.mtx files","code":"# Get the path to CSV format example data csv_data_dir <- system.file(\"extdata\", \"example_data\", package = \"scCulturePredict\")  # Get the path to 10X format example data tenx_data_dir <- system.file(\"extdata\", \"example_data_10x\", package = \"scCulturePredict\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic Workflow","title":"Introduction to scCulturePredict","text":"typical workflow using scCulturePredict consists following steps: Load single-cell data Preprocess data Perform dimensionality reduction Conduct pathway analysis Predict cell culture media Evaluate visualize results","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"quick-start-complete-analysis-with-one-function","dir":"Articles","previous_headings":"Basic Workflow","what":"Quick Start: Complete Analysis with One Function","title":"Introduction to scCulturePredict","text":"users, easiest way run complete scCulturePredict analysis using main scumap() function, performs steps automatically: scumap() function automatically: - Loads validates data - Performs preprocessing quality control - Generates UMAP coordinates - Conducts KEGG pathway analysis - Makes predictions using similarity machine learning approaches - Evaluates prediction performance - Creates publication-ready visualizations - Saves results specified output directory plots results automatically saved ./scumap_results/ immediate use!","code":"# Complete analysis with one function call results <- scumap(     data_dir = csv_data_dir,     kegg_file = system.file(\"extdata\", \"kegg\", \"example_pathway.keg\", package = \"scCulturePredict\"),     output_dir = \"./scumap_results\",     experiment_id = \"example_analysis\",     progress = TRUE, # Show progress bar     verbose = TRUE # Print detailed messages )  # Access the final results seurat_object <- results$seurat_object pathway_results <- results$pathway_results prediction_results <- results$prediction_results evaluation_results <- results$evaluation_results  # View UMAP coordinates with predictions head(seurat_object@meta.data[, c(\"UMAP_1\", \"UMAP_2\", \"sample\", \"classification_pred\")])  # Check prediction accuracy table(seurat_object$sample, seurat_object$classification_pred)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"advanced-usage-step-by-step-workflow","dir":"Articles","previous_headings":"Basic Workflow","what":"Advanced Usage: Step-by-Step Workflow","title":"Introduction to scCulturePredict","text":"users need control individual steps want understand underlying processes, following sections demonstrate step detail.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"load-data","dir":"Articles","previous_headings":"Basic Workflow","what":"1. Load Data","title":"Introduction to scCulturePredict","text":"scCulturePredict package can load data CSV 10X Genomics formats. examples approaches:","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"loading-csv-format-data","dir":"Articles","previous_headings":"Basic Workflow > 1. Load Data","what":"Loading CSV Format Data","title":"Introduction to scCulturePredict","text":"","code":"# Load the CSV format example data seurat_object_csv <- load_data(     data_dir = csv_data_dir,     experiment_id = \"example\",     min_cells = 3,     min_features = 10,     verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"loading-10x-genomics-format-data","dir":"Articles","previous_headings":"Basic Workflow > 1. Load Data","what":"Loading 10X Genomics Format Data","title":"Introduction to scCulturePredict","text":"","code":"# Load the 10X format example data seurat_object_10x <- load_data(     data_dir = tenx_data_dir,     experiment_id = \"example_10x\",     min_cells = 3,     min_features = 10,     verbose = TRUE )  # Alternatively, you can use Seurat's Read10X function directly tenx_data <- Read10X(tenx_data_dir) seurat_object_10x_direct <- CreateSeuratObject(     counts = tenx_data,     min.cells = 3,     min.features = 10 )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"preprocess-data","dir":"Articles","previous_headings":"Basic Workflow","what":"2. Preprocess Data","title":"Introduction to scCulturePredict","text":"Next, preprocess data, includes normalization, scaling, identifying variable features:","code":"# Preprocess the data seurat_object <- preprocess_data(     seurat_object = seurat_object,     normalization_method = \"LogNormalize\",     scale_factor = 10000,     variable_features_n = 2000,     verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"perform-dimensionality-reduction","dir":"Articles","previous_headings":"Basic Workflow","what":"3. Perform Dimensionality Reduction","title":"Introduction to scCulturePredict","text":"reduce dimensionality data using UMAP: Let’s visualize UMAP embedding:","code":"# Perform dimensionality reduction seurat_object <- reduce_dimensions(     seurat_object = seurat_object,     pca_dims = 30,     umap_dims = 2,     verbose = TRUE ) # Create UMAP visualization umap_plot <- create_umap_plot(     seurat_object = seurat_object,     color_by = \"sample\",     point_size = 1.2,     title = \"UMAP of Example Data\" )  # Display the plot print(umap_plot)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"pathway-analysis","dir":"Articles","previous_headings":"Basic Workflow","what":"4. Pathway Analysis","title":"Introduction to scCulturePredict","text":"Now perform KEGG pathway analysis identify biological pathways active data:","code":"# Path to KEGG data kegg_file <- system.file(\"extdata\", \"kegg\", \"example_pathway.keg\", package = \"scCulturePredict\")  # Parse KEGG data kegg_data <- parse_kegg_keg(kegg_file, verbose = TRUE)  # Build pathway fingerprints pathway_matrix <- build_fingerprints(     seurat_object = seurat_object,     kegg_data = kegg_data,     verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"predict-cell-culture-media","dir":"Articles","previous_headings":"Basic Workflow","what":"5. Predict Cell Culture Media","title":"Introduction to scCulturePredict","text":"can now predict culture media using similarity-based SVM approaches:","code":"# Similarity-based prediction similarity_results <- predict_by_similarity(     pathway_matrix = pathway_matrix,     signature_matrix = signature_matrix,     threshold = 0.1 )  # SVM-based prediction svm_results <- predict_by_svm(     pathway_matrix = pathway_matrix,     seurat_object = seurat_object )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"evaluate-and-visualize-results","dir":"Articles","previous_headings":"Basic Workflow","what":"6. Evaluate and Visualize Results","title":"Introduction to scCulturePredict","text":"First, let’s add mock prediction results demonstrate evaluation functionality: Finally, evaluate prediction results create visualizations:","code":"# Evaluate predictions evaluation_results <- evaluate_predictions(seurat_object)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"create-accuracy-plot","dir":"Articles","previous_headings":"","what":"Create accuracy plot","title":"Introduction to scCulturePredict","text":"accuracy_plot <- create_accuracy_plot( evaluation_results = evaluation_results, method = “svm”, title = “SVM Prediction Accuracy” )","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"display-the-plot","dir":"Articles","previous_headings":"","what":"Display the plot","title":"Introduction to scCulturePredict","text":"print(accuracy_plot)","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"create-confusion-matrix-heatmap","dir":"Articles","previous_headings":"","what":"Create confusion matrix heatmap","title":"Introduction to scCulturePredict","text":"confusion_plot <- create_confusion_heatmap( evaluation_results = evaluation_results, method = “direct”, title = “Direct Prediction Confusion Matrix” )","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"display-the-plot-1","dir":"Articles","previous_headings":"","what":"Display the plot","title":"Introduction to scCulturePredict","text":"print(confusion_plot)","code":"# Saving Results  You can save all visualization plots to a directory:   ``` r # Create directory for results results_dir <- \"scCulturePredict_results\" if (!dir.exists(results_dir)) dir.create(results_dir)  # Save visualization plots save_visualization_plots(     seurat_object = seurat_object,     evaluation_results = evaluation_results,     output_dir = results_dir,     prefix = \"example\",     verbose = TRUE )"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"csv-format","dir":"Articles","previous_headings":"Working with Different Data Formats","what":"CSV Format","title":"Introduction to scCulturePredict","text":"CSV format simpler consists : - counts matrix genes rows cells columns - metadata file cells rows annotations columns format easy create manipulate using standard R functions like read.csv() write.csv().","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"x-genomics-format","dir":"Articles","previous_headings":"Working with Different Data Formats","what":"10X Genomics Format","title":"Introduction to scCulturePredict","text":"10X Genomics format industry standard consists : - barcodes.tsv - Contains cell barcodes - features.tsv - Contains gene/feature information - matrix.mtx - Contains count matrix sparse format format memory-efficient large datasets widely used single-cell analysis.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to scCulturePredict","text":"vignette demonstrated basic workflow using scCulturePredict package analyze single-cell RNA-seq data predict cell culture media, support CSV 10X Genomics data formats. advanced usage customization options, please refer advanced vignette function documentation.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-introduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to scCulturePredict","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.2           Seurat_5.3.0            SeuratObject_5.1.0      #> [4] sp_2.2-0                scCulturePredict_0.99.1 BiocStyle_2.36.0        #>  #> loaded via a namespace (and not attached): #>   [1] deldir_2.0-4           pbapply_1.7-4          gridExtra_2.3          #>   [4] rlang_1.1.6            magrittr_2.0.3         RcppAnnoy_0.0.22       #>   [7] spatstat.geom_3.5-0    matrixStats_1.5.0      ggridges_0.5.6         #>  [10] compiler_4.5.1         png_0.1-8              systemfonts_1.2.3      #>  [13] vctrs_0.6.5            reshape2_1.4.4         stringr_1.5.1          #>  [16] pkgconfig_2.0.3        fastmap_1.2.0          labeling_0.4.3         #>  [19] promises_1.3.3         rmarkdown_2.29         ragg_1.4.0             #>  [22] purrr_1.1.0            xfun_0.52              cachem_1.1.0           #>  [25] jsonlite_2.0.0         goftest_1.2-3          later_1.4.2            #>  [28] spatstat.utils_3.1-5   irlba_2.3.5.1          parallel_4.5.1         #>  [31] cluster_2.1.8.1        R6_2.6.1               ica_1.0-3              #>  [34] spatstat.data_3.1-6    stringi_1.8.7          bslib_0.9.0            #>  [37] RColorBrewer_1.1-3     reticulate_1.43.0      spatstat.univar_3.1-4  #>  [40] parallelly_1.45.1      lmtest_0.9-40          jquerylib_0.1.4        #>  [43] scattermore_1.2        Rcpp_1.1.0             bookdown_0.43          #>  [46] knitr_1.50             tensor_1.5.1           future.apply_1.20.0    #>  [49] zoo_1.8-14             sctransform_0.4.2      httpuv_1.6.16          #>  [52] Matrix_1.7-3           splines_4.5.1          igraph_2.1.4           #>  [55] tidyselect_1.2.1       abind_1.4-8            yaml_2.3.10            #>  [58] spatstat.random_3.4-1  spatstat.explore_3.5-2 codetools_0.2-20       #>  [61] miniUI_0.1.2           listenv_0.9.1          plyr_1.8.9             #>  [64] lattice_0.22-7         tibble_3.3.0           withr_3.0.2            #>  [67] shiny_1.11.1           ROCR_1.0-11            evaluate_1.0.4         #>  [70] Rtsne_0.17             future_1.67.0          fastDummies_1.7.5      #>  [73] desc_1.4.3             survival_3.8-3         polyclip_1.10-7        #>  [76] fitdistrplus_1.2-4     pillar_1.11.0          BiocManager_1.30.26    #>  [79] KernSmooth_2.23-26     plotly_4.11.0          generics_0.1.4         #>  [82] RcppHNSW_0.6.0         scales_1.4.0           globals_0.18.0         #>  [85] xtable_1.8-4           glue_1.8.0             lazyeval_0.2.2         #>  [88] tools_4.5.1            data.table_1.17.8      RSpectra_0.16-2        #>  [91] RANN_2.6.2             fs_1.6.6               dotCall64_1.2          #>  [94] cowplot_1.2.0          grid_4.5.1             tidyr_1.3.1            #>  [97] nlme_3.1-168           patchwork_1.3.1        cli_3.6.5              #> [100] spatstat.sparse_3.1-0  textshaping_1.0.1      spam_2.11-1            #> [103] viridisLite_0.4.2      dplyr_1.1.4            uwot_0.2.3             #> [106] gtable_0.3.6           sass_0.4.10            digest_0.6.37          #> [109] progressr_0.15.1       ggrepel_0.9.6          htmlwidgets_1.6.4      #> [112] farver_2.1.2           htmltools_0.5.8.1      pkgdown_2.1.3          #> [115] lifecycle_1.0.4        httr_1.4.7             mime_0.13              #> [118] MASS_7.3-65"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visualization with scCulturePredict","text":"Effective visualization crucial interpreting single-cell RNA sequencing data. scCulturePredict package provides comprehensive set visualization functions designed help explore data evaluate prediction results. vignette demonstrates use visualization tools create informative publication-ready figures.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"loading-required-packages","dir":"Articles","previous_headings":"Introduction","what":"Loading Required Packages","title":"Visualization with scCulturePredict","text":"","code":"library(scCulturePredict) library(Seurat) library(ggplot2) library(patchwork)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"creating-example-data","dir":"Articles","previous_headings":"Introduction","what":"Creating Example Data","title":"Visualization with scCulturePredict","text":"vignette, ’ll create example data demonstrate visualization capabilities:","code":"# Create a mock Seurat object create_mock_seurat <- function() {     # Create a small Seurat object with UMAP coordinates     set.seed(42)     counts <- matrix(rpois(100 * 30, 10), nrow = 100, ncol = 30)     rownames(counts) <- paste0(\"gene\", 1:100)     colnames(counts) <- paste0(\"cell\", 1:30)      seurat <- Seurat::CreateSeuratObject(counts = counts)      # Add UMAP coordinates and metadata     seurat@meta.data$UMAP_1 <- rnorm(30)     seurat@meta.data$UMAP_2 <- rnorm(30)     seurat@meta.data$sample <- rep(c(\"A\", \"B\", \"C\"), each = 10)     seurat@meta.data$cluster <- rep(c(1, 2, 3), times = 10)     seurat@meta.data$percent_mito <- runif(30, 0, 10)      return(seurat) }  # Create mock evaluation results create_mock_evaluation <- function() {     list(         direct_accuracy = data.frame(             sample = c(\"A\", \"B\", \"C\"),             correct = c(8, 7, 9),             percent = c(\"80%\", \"70%\", \"90%\")         ),         direct_table = as.table(matrix(c(8, 1, 1, 1, 7, 2, 1, 2, 7),             nrow = 3,             dimnames = list(c(\"A\", \"B\", \"C\"), c(\"A\", \"B\", \"C\"))         )),         svm_accuracy = data.frame(             sample = c(\"A\", \"B\", \"C\"),             correct = c(9, 8, 7),             percent = c(\"90%\", \"80%\", \"70%\")         ),         svm_table = as.table(matrix(c(9, 0, 1, 1, 8, 1, 0, 2, 7),             nrow = 3,             dimnames = list(c(\"A\", \"B\", \"C\"), c(\"A\", \"B\", \"C\"))         )),         threshold_table = as.table(matrix(c(7, 1, 0, 2, 6, 1, 1, 2, 8),             nrow = 3,             dimnames = list(c(\"A\", \"B\", \"C\"), c(\"A\", \"B\", \"C\"))         ))     ) }  # Generate example data seurat_object <- create_mock_seurat() evaluation_results <- create_mock_evaluation()"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"umap-visualization","dir":"Articles","previous_headings":"Basic Visualizations","what":"UMAP Visualization","title":"Visualization with scCulturePredict","text":"create_umap_plot function generates UMAP visualizations Seurat object:","code":"# Basic UMAP plot umap_plot <- create_umap_plot(     seurat_object = seurat_object,     color_by = \"sample\",     title = \"UMAP of Example Data\" )  print(umap_plot)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"customizing-umap-plots","dir":"Articles","previous_headings":"Basic Visualizations > UMAP Visualization","what":"Customizing UMAP Plots","title":"Visualization with scCulturePredict","text":"can customize various aspects UMAP plot:  can also use metadata columns coloring:","code":"# Customized UMAP plot umap_custom <- create_umap_plot(     seurat_object = seurat_object,     color_by = \"cluster\",     point_size = 2.5,     title = \"UMAP by Cluster\",     legend_title = \"Cluster ID\" )  print(umap_custom) # UMAP with continuous variable umap_continuous <- create_umap_plot(     seurat_object = seurat_object,     color_by = \"percent_mito\",     point_size = 2,     title = \"UMAP by Mitochondrial Percentage\",     legend_title = \"% Mito\" )  print(umap_continuous)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"combining-multiple-umap-plots","dir":"Articles","previous_headings":"Basic Visualizations > UMAP Visualization","what":"Combining Multiple UMAP Plots","title":"Visualization with scCulturePredict","text":"plots can combined using patchwork package:","code":"# Combine multiple UMAP plots combined_plot <- umap_plot + umap_custom + umap_continuous +     plot_layout(ncol = 2) +     plot_annotation(title = \"Multiple UMAP Visualizations\")  print(combined_plot)"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"accuracy-plots","dir":"Articles","previous_headings":"Prediction Evaluation Visualizations","what":"Accuracy Plots","title":"Visualization with scCulturePredict","text":"create_accuracy_plot function visualizes prediction accuracy:","code":"# Direct method accuracy plot direct_accuracy <- create_accuracy_plot(     evaluation_results = evaluation_results,     method = \"direct\",     title = \"Direct Prediction Accuracy\" )  # SVM method accuracy plot svm_accuracy <- create_accuracy_plot(     evaluation_results = evaluation_results,     method = \"svm\",     title = \"SVM Prediction Accuracy\" )  # Display the plots side by side direct_accuracy + svm_accuracy + plot_layout(ncol = 2)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"customizing-accuracy-plots","dir":"Articles","previous_headings":"Prediction Evaluation Visualizations > Accuracy Plots","what":"Customizing Accuracy Plots","title":"Visualization with scCulturePredict","text":"can customize color palette:","code":"# Custom color palette custom_colors <- c(\"A\" = \"#E41A1C\", \"B\" = \"#377EB8\", \"C\" = \"#4DAF4A\")  # Customized accuracy plot custom_accuracy <- create_accuracy_plot(     evaluation_results = evaluation_results,     method = \"direct\",     title = \"Customized Accuracy Plot\",     color_palette = custom_colors )  print(custom_accuracy)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"confusion-matrix-heatmaps","dir":"Articles","previous_headings":"Prediction Evaluation Visualizations","what":"Confusion Matrix Heatmaps","title":"Visualization with scCulturePredict","text":"create_confusion_heatmap function visualizes confusion matrices:","code":"# Direct method confusion matrix direct_confusion <- create_confusion_heatmap(     evaluation_results = evaluation_results,     method = \"direct\",     title = \"Direct Prediction Confusion Matrix\" )  # SVM method confusion matrix svm_confusion <- create_confusion_heatmap(     evaluation_results = evaluation_results,     method = \"svm\",     title = \"SVM Prediction Confusion Matrix\" )  # Threshold method confusion matrix threshold_confusion <- create_confusion_heatmap(     evaluation_results = evaluation_results,     method = \"threshold\",     title = \"Threshold Prediction Confusion Matrix\" )  # Display the plots direct_confusion svm_confusion threshold_confusion"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"customizing-confusion-heatmaps","dir":"Articles","previous_headings":"Prediction Evaluation Visualizations > Confusion Matrix Heatmaps","what":"Customizing Confusion Heatmaps","title":"Visualization with scCulturePredict","text":"can customize color gradient:","code":"# Custom color gradient custom_gradient <- c(\"white\", \"navy\")  # Customized confusion heatmap custom_confusion <- create_confusion_heatmap(     evaluation_results = evaluation_results,     method = \"svm\",     title = \"Customized Confusion Matrix\",     color_palette = custom_gradient )  print(custom_confusion)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"evaluation-metrics-visualization","dir":"Articles","previous_headings":"","what":"Evaluation Metrics Visualization","title":"Visualization with scCulturePredict","text":"create_evaluation_metrics_plot function provides detailed evaluation metrics:","code":"# For this demonstration, we need additional metrics that would come from a real evaluation # This code is provided as an example but not evaluated in this vignette  # Create evaluation metrics plot metrics_plot <- create_evaluation_metrics_plot(     evaluation_results = complete_evaluation_results,     plot_type = \"metrics\",     title = \"Prediction Performance Metrics\" )  print(metrics_plot)  # ROC curve roc_plot <- create_evaluation_metrics_plot(     evaluation_results = complete_evaluation_results,     plot_type = \"roc\",     title = \"ROC Curve\" )  print(roc_plot)  # Precision-Recall curve pr_plot <- create_evaluation_metrics_plot(     evaluation_results = complete_evaluation_results,     plot_type = \"pr\",     title = \"Precision-Recall Curve\" )  print(pr_plot)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"saving-visualization-results","dir":"Articles","previous_headings":"","what":"Saving Visualization Results","title":"Visualization with scCulturePredict","text":"save_visualization_plots function saves visualization plots specified directory: save following files specified directory: - example_umap.png - example_direct_accuracy.png - example_svm_accuracy.png - example_direct_confusion.png - example_svm_confusion.png","code":"# Create directory for results results_dir <- \"scCulturePredict_results\" if (!dir.exists(results_dir)) dir.create(results_dir)  # Save visualization plots save_visualization_plots(     seurat_object = seurat_object,     evaluation_results = evaluation_results,     output_dir = results_dir,     prefix = \"example\",     color_palette = custom_colors,     verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"advanced-customization","dir":"Articles","previous_headings":"","what":"Advanced Customization","title":"Visualization with scCulturePredict","text":"Since visualization functions return ggplot objects, can customize using standard ggplot2 functions:","code":"# Start with a basic plot base_plot <- create_umap_plot(     seurat_object = seurat_object,     color_by = \"sample\" )  # Add custom ggplot2 elements customized_plot <- base_plot +     theme_minimal() +     labs(         title = \"Highly Customized UMAP Plot\",         subtitle = \"With additional annotations\",         caption = \"Created with scCulturePredict\"     ) +     theme(         plot.title = element_text(size = 16, face = \"bold\"),         plot.subtitle = element_text(size = 12, color = \"darkgray\"),         legend.position = \"bottom\",         panel.grid.major = element_line(color = \"lightgray\", linetype = \"dashed\"),         panel.background = element_rect(fill = \"aliceblue\")     ) +     scale_color_brewer(palette = \"Set1\")  print(customized_plot)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Visualization with scCulturePredict","text":"scCulturePredict package provides comprehensive set visualization functions exploring single-cell data evaluating prediction results. functions generate publication-ready figures can customized using powerful ggplot2 framework.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/articles/scCulturePredict-visualization.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Visualization with scCulturePredict","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] patchwork_1.3.1         ggplot2_3.5.2           Seurat_5.3.0            #> [4] SeuratObject_5.1.0      sp_2.2-0                scCulturePredict_0.99.1 #> [7] BiocStyle_2.36.0        #>  #> loaded via a namespace (and not attached): #>   [1] deldir_2.0-4           pbapply_1.7-4          gridExtra_2.3          #>   [4] rlang_1.1.6            magrittr_2.0.3         RcppAnnoy_0.0.22       #>   [7] spatstat.geom_3.5-0    matrixStats_1.5.0      ggridges_0.5.6         #>  [10] compiler_4.5.1         png_0.1-8              systemfonts_1.2.3      #>  [13] vctrs_0.6.5            reshape2_1.4.4         stringr_1.5.1          #>  [16] pkgconfig_2.0.3        fastmap_1.2.0          labeling_0.4.3         #>  [19] promises_1.3.3         rmarkdown_2.29         ragg_1.4.0             #>  [22] purrr_1.1.0            xfun_0.52              cachem_1.1.0           #>  [25] jsonlite_2.0.0         goftest_1.2-3          later_1.4.2            #>  [28] spatstat.utils_3.1-5   irlba_2.3.5.1          parallel_4.5.1         #>  [31] cluster_2.1.8.1        R6_2.6.1               ica_1.0-3              #>  [34] spatstat.data_3.1-6    stringi_1.8.7          bslib_0.9.0            #>  [37] RColorBrewer_1.1-3     reticulate_1.43.0      spatstat.univar_3.1-4  #>  [40] parallelly_1.45.1      lmtest_0.9-40          jquerylib_0.1.4        #>  [43] scattermore_1.2        Rcpp_1.1.0             bookdown_0.43          #>  [46] knitr_1.50             tensor_1.5.1           future.apply_1.20.0    #>  [49] zoo_1.8-14             sctransform_0.4.2      httpuv_1.6.16          #>  [52] Matrix_1.7-3           splines_4.5.1          igraph_2.1.4           #>  [55] tidyselect_1.2.1       abind_1.4-8            yaml_2.3.10            #>  [58] spatstat.random_3.4-1  spatstat.explore_3.5-2 codetools_0.2-20       #>  [61] miniUI_0.1.2           listenv_0.9.1          plyr_1.8.9             #>  [64] lattice_0.22-7         tibble_3.3.0           withr_3.0.2            #>  [67] shiny_1.11.1           ROCR_1.0-11            evaluate_1.0.4         #>  [70] Rtsne_0.17             future_1.67.0          fastDummies_1.7.5      #>  [73] desc_1.4.3             survival_3.8-3         polyclip_1.10-7        #>  [76] fitdistrplus_1.2-4     pillar_1.11.0          BiocManager_1.30.26    #>  [79] KernSmooth_2.23-26     plotly_4.11.0          generics_0.1.4         #>  [82] RcppHNSW_0.6.0         scales_1.4.0           globals_0.18.0         #>  [85] xtable_1.8-4           glue_1.8.0             lazyeval_0.2.2         #>  [88] tools_4.5.1            data.table_1.17.8      RSpectra_0.16-2        #>  [91] RANN_2.6.2             fs_1.6.6               dotCall64_1.2          #>  [94] cowplot_1.2.0          grid_4.5.1             tidyr_1.3.1            #>  [97] nlme_3.1-168           cli_3.6.5              spatstat.sparse_3.1-0  #> [100] textshaping_1.0.1      spam_2.11-1            viridisLite_0.4.2      #> [103] dplyr_1.1.4            uwot_0.2.3             gtable_0.3.6           #> [106] sass_0.4.10            digest_0.6.37          progressr_0.15.1       #> [109] ggrepel_0.9.6          htmlwidgets_1.6.4      farver_2.1.2           #> [112] htmltools_0.5.8.1      pkgdown_2.1.3          lifecycle_1.0.4        #> [115] httr_1.4.7             mime_0.13              MASS_7.3-65"},{"path":"https://NCMBianchi.github.io/scCulturePredict/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Niccolò Bianchi. Author, maintainer.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bianchi N (2025). scCulturePredict: Single-Cell Culture Media Prediction Using Transcriptomic Fingerprints. R package version 0.99.1, https://NCMBianchi.github.io/scCulturePredict.","code":"@Manual{,   title = {scCulturePredict: Single-Cell Culture Media Prediction Using Transcriptomic Fingerprints},   author = {Niccolò Bianchi},   year = {2025},   note = {R package version 0.99.1},   url = {https://NCMBianchi.github.io/scCulturePredict}, }"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"build-and-apply-transcriptomic-fingerprints-for-cell-culture-media-prediction","dir":"","previous_headings":"","what":"Build and Apply Transcriptomic Fingerprints for Cell Culture Media Prediction","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"scCulturePredict R package provides dual functionality cell culture media prediction single-cell transcriptomic data. BUILD mode generates transferable transcriptomic fingerprints labeled training data, PREDICT mode applies pre-built fingerprints unlabeled datasets culture condition prediction.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"build-mode-generate-fingerprints","dir":"","previous_headings":"Features","what":"BUILD Mode (Generate Fingerprints)","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Train labeled single-cell datasets Generate transferable transcriptomic fingerprints using KEGG pathway analysis Train similarity-based SVM prediction models Evaluate model performance cross-validation Save fingerprints models future predictions","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"predict-mode-apply-fingerprints","dir":"","previous_headings":"Features","what":"PREDICT Mode (Apply Fingerprints)","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Apply pre-built fingerprints unlabeled datasets Make culture media predictions using trained models Calculate prediction confidence scores Generate prediction-specific visualizations","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"core-capabilities","dir":"","previous_headings":"Features","what":"Core Capabilities","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Load preprocess single-cell data (supports CSV 10X Genomics formats) Perform dimensionality reduction UMAP t-SNE Integrate Seurat workflows Comprehensive evaluation visualization tools","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"from-bioconductor-currently-under-review","dir":"","previous_headings":"Installation","what":"From Bioconductor (currently under review)","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"scCulturePredict\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"from-github-development-version","dir":"","previous_headings":"Installation","what":"From GitHub (development version)","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"nccb/scCulturePredict\")"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"build-mode-generate-fingerprints-from-labeled-data","dir":"","previous_headings":"Quick Start","what":"BUILD Mode: Generate Fingerprints from Labeled Data","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"","code":"library(scCulturePredict)  # Build fingerprints from labeled training data training_results <- scumap(   data_dir = \"./DATA_labeled\",   kegg_file = \"kegg_file\",   output_dir = \"./training_results\",   mode = \"build\",   experiment_id = \"training\",   progress = TRUE,   verbose = TRUE )  # Access training results fingerprint_file <- training_results$fingerprint_file training_accuracy <- training_results$evaluation_results$overall_accuracy print(paste(\"Training accuracy:\", training_accuracy))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"predict-mode-apply-fingerprints-to-new-data","dir":"","previous_headings":"Quick Start","what":"PREDICT Mode: Apply Fingerprints to New Data","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"","code":"# Apply fingerprints to unlabeled data prediction_results <- scumap(   data_dir = \"./DATA_unlabeled\",   output_dir = \"./prediction_results\",   mode = \"predict\",   fingerprint_file = fingerprint_file,   experiment_id = \"predictions\",   progress = TRUE,   verbose = TRUE )  # Access predictions predictions <- prediction_results$seurat_object$classification_pred confidence_scores <- prediction_results$seurat_object$prediction_confidence  # View results head(data.frame(   cell_barcode = colnames(prediction_results$seurat_object),   predicted_medium = predictions,   confidence = confidence_scores ))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"complete-workflow-example","dir":"","previous_headings":"Quick Start","what":"Complete Workflow Example","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"","code":"# Step 1: Build fingerprints (training phase) training_results <- scumap(   data_dir = \"./DATA_labeled\",   kegg_file = \"sce00001.keg\",   output_dir = \"./results/training\",   mode = \"build\" )  # Step 2: Apply to new data (prediction phase) prediction_results <- scumap(   data_dir = \"./DATA_unlabeled\",   output_dir = \"./results/predictions\",   mode = \"predict\",   fingerprint_file = training_results$fingerprint_file )  # Check prediction confidence summary(prediction_results$seurat_object$prediction_confidence) table(prediction_results$seurat_object$classification_pred)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"advanced-usage","dir":"","previous_headings":"Quick Start","what":"Advanced Usage","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"users need control individual steps:","code":"# Step-by-step approach data_dir <- system.file(\"extdata\", \"example_data\", package = \"scCulturePredict\") seurat_object <- load_data(data_dir, experiment_id = \"example\") seurat_object <- preprocess_data(seurat_object) seurat_object <- reduce_dimensions(seurat_object)  # Continue with pathway analysis and predictions..."},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Comprehensive documentation available package: vignette(\"scCulturePredict-introduction\") - Introduction scCulturePredict vignette(\"scCulturePredict-visualization\") - Visualisation guide vignette(\"scCulturePredict-advanced\") - Advanced usage","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"code-quality","dir":"","previous_headings":"","what":"Code Quality","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"scCulturePredict implements several code quality measures ensure robustness maintainability:","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"linting","dir":"","previous_headings":"Code Quality","what":"Linting","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"package uses lintr static code analysis. run linting checks: .lintr configuration file included package root.","code":"# Install lintr if needed # install.packages(\"lintr\")  # Run linting on the package lintr::lint_package()"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"code-formatting","dir":"","previous_headings":"Code Quality","what":"Code Formatting","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Code formatting follows Bioconductor style guidelines enforced using styler:","code":"# Install styler if needed # install.packages(\"styler\")  # Apply styling to the package styler::style_pkg(style = styler::tidyverse_style(indent_by = 2))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"comprehensive-checks","dir":"","previous_headings":"Code Quality","what":"Comprehensive Checks","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Run comprehensive check script ensure package ready Bioconductor submission: run: - R CMD check (–-cran flag) - BiocCheck - Linting checks - Test coverage analysis - Vignette building - Example code execution","code":"# From the package root directory Rscript scripts/check_package.R"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"pre-commit-hook","dir":"","previous_headings":"Development","what":"Pre-commit Hook","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"enforce code quality development, can install pre-commit hook:","code":"# From the package root directory cp scripts/pre-commit-hook.R .git/hooks/pre-commit chmod +x .git/hooks/pre-commit"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"contributing","dir":"","previous_headings":"Development","what":"Contributing","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"Contributions welcome! Please feel free submit Pull Request. Fork repository Create feature branch (git checkout -b feature/amazing-feature) Run code quality checks (Rscript scripts/check_package.R) Commit changes (git commit -m 'Add amazing feature') Push branch (git push origin feature/amazing-feature) Open Pull Request","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"use scCulturePredict research, please cite (bibtex format):","code":"@Manual{scCulturePredict2025,   title = {scCulturePredict: Single-Cell Culture Media Prediction Using Transcriptomic Fingerprints},   author = {Niccolò Bianchi},   year = {2025},   note = {R package version 0.99.2},   url = {https://github.com/ncmbianchi/scCulturePredict}, }"},{"path":"https://NCMBianchi.github.io/scCulturePredict/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Predict Cell Culture Media from Single-Cell Transcriptomes","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze pathway activity by condition — analyze_pathway_activity","title":"Analyze pathway activity by condition — analyze_pathway_activity","text":"Analyzes pathway activity across different conditions cell types.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze pathway activity by condition — analyze_pathway_activity","text":"","code":"analyze_pathway_activity(seurat_object, pathway_results, condition = \"sample\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze pathway activity by condition — analyze_pathway_activity","text":"seurat_object Seurat object containing single-cell data. pathway_results List containing pathway analysis results. condition Character string specifying metadata column group . Default \"sample\".","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze pathway activity by condition — analyze_pathway_activity","text":"data frame containing pathway activity statistics condition columns: pathway: Pathway name condition: Condition cell type mean_activity: Mean pathway activity sd_activity: Standard deviation pathway activity p_value: P-value statistical test adj_p_value: Adjusted p-value (FDR)","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze pathway activity by condition — analyze_pathway_activity","text":"","code":"# Example with mock pathway activities # Create mock pathway activity matrix pathway_activities <- matrix(     rnorm(200, mean = 0, sd = 1),     nrow = 20,     dimnames = list(         paste0(\"Pathway\", seq_len(20)),         paste0(\"Sample\", seq_len(10))     ) )  # Create mock metadata sample_metadata <- data.frame(     sample_id = paste0(\"Sample\", seq_len(10)),     condition = rep(c(\"Control\", \"Treatment\"), each = 5) )  # Analyze pathway activities analysis_results <- analyze_pathway_activity(     pathway_activities,     sample_metadata,     group_by = \"condition\" ) #> Error in analyze_pathway_activity(pathway_activities, sample_metadata,     group_by = \"condition\"): unused argument (group_by = \"condition\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze pathway enrichment — analyze_pathway_enrichment","title":"Analyze pathway enrichment — analyze_pathway_enrichment","text":"Performs pathway enrichment analysis Seurat object using KEGG pathways. function calculates mean expression genes pathway performs statistical testing identify significantly enriched pathways.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze pathway enrichment — analyze_pathway_enrichment","text":"","code":"analyze_pathway_enrichment(   seurat_obj,   kegg_pathways,   min_genes = 5,   max_genes = 500,   p_cutoff = 0.05,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze pathway enrichment — analyze_pathway_enrichment","text":"seurat_obj Seurat object. Seurat object containing gene expression data. kegg_pathways List. list KEGG pathways element character vector gene names. names list pathway IDs. min_genes Integer. Minimum number genes required pathway analysis (default: 5). max_genes Integer. Maximum number genes allowed pathway analysis (default: 500). p_cutoff Numeric. P-value cutoff significant pathways (default: 0.05). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze pathway enrichment — analyze_pathway_enrichment","text":"data frame containing pathway enrichment results columns: pathway: Pathway ID n_genes: Number genes pathway mean_expr: Mean expression pathway genes sd_expr: Standard deviation pathway expression p_value: P-value statistical test adj_p_value: Adjusted p-value (FDR)","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_enrichment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze pathway enrichment — analyze_pathway_enrichment","text":"function performs following steps: Validates input parameters data Filters pathways based gene count Calculates mean expression pathway Performs statistical testing Adjusts p-values multiple testing","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/analyze_pathway_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze pathway enrichment — analyze_pathway_enrichment","text":"","code":"# Example with mock pathway activity matrix pathway_activities <- matrix(     rnorm(150),     nrow = 15,     dimnames = list(         paste0(\"Pathway\", seq_len(15)),         paste0(\"Sample\", seq_len(10))     ) ) plot <- create_pathway_heatmap(pathway_activities) #> Error in create_pathway_heatmap(pathway_activities): seurat_obj must be a Seurat object"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/build_fingerprints.html","id":null,"dir":"Reference","previous_headings":"","what":"Build transcriptomic fingerprints — build_fingerprints","title":"Build transcriptomic fingerprints — build_fingerprints","text":"Builds transcriptomic fingerprints aggregating gene expression pathway creating signature profiles condition.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/build_fingerprints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build transcriptomic fingerprints — build_fingerprints","text":"","code":"build_fingerprints(seurat_object, kegg_pathways, verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/build_fingerprints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build transcriptomic fingerprints — build_fingerprints","text":"seurat_object Seurat object containing single-cell data. kegg_pathways list KEGG pathways associated genes. verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/build_fingerprints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build transcriptomic fingerprints — build_fingerprints","text":"list containing: pathway_matrix: Matrix pathway expression values signature_matrix: Matrix condition-specific signature profiles","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/build_fingerprints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build transcriptomic fingerprints — build_fingerprints","text":"","code":"# Example with minimal mock data library(Seurat) #> Loading required package: SeuratObject #> Loading required package: sp #> ‘SeuratObject’ was built under R 4.5.0 but the current version is #> 4.5.1; it is recomended that you reinstall ‘SeuratObject’ as the ABI #> for R may have changed #>  #> Attaching package: ‘SeuratObject’ #> The following objects are masked from ‘package:base’: #>  #>     intersect, t # Create small mock dataset counts <- matrix(rpois(2000, 5), nrow = 200) rownames(counts) <- paste0(\"Gene\", seq_len(200)) colnames(counts) <- paste0(\"Cell\", seq_len(10)) metadata <- data.frame(     row.names = colnames(counts),     culture = rep(c(\"TypeA\", \"TypeB\"), each = 5) ) seurat_obj <- CreateSeuratObject(counts = counts, meta.data = metadata) #> Warning: Data is of class matrix. Coercing to dgCMatrix.  # Create mock pathway database pathways <- list(     Pathway1 = sample(rownames(counts), 10),     Pathway2 = sample(rownames(counts), 15),     Pathway3 = sample(rownames(counts), 12) )  # Build fingerprints fingerprints <- build_fingerprints(     seurat_obj,     group_by = \"culture\",     pathways = pathways ) #> Error in build_fingerprints(seurat_obj, group_by = \"culture\", pathways = pathways): unused arguments (group_by = \"culture\", pathways = pathways)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_pathway_activities.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","title":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","text":"Calculates pathway activity scores new data without building signature profiles. function used PREDICT mode signature matrices already available pre-built fingerprints.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_pathway_activities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","text":"","code":"calculate_pathway_activities(seurat_object, kegg_pathways, verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_pathway_activities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","text":"seurat_object Seurat object containing single-cell data. kegg_pathways list KEGG pathways gene names. verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_pathway_activities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","text":"matrix pathway activity scores cells rows pathways columns.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_pathway_activities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","text":"function performs pathway activity calculation part fingerprint building. aggregates gene expression pathway create signature profiles different conditions. appropriate function use applying pre-built fingerprints new unlabeled data.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_pathway_activities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pathway activities only (for PREDICT mode) — calculate_pathway_activities","text":"","code":"# Example with mock data library(Seurat) # Create minimal mock Seurat object counts <- matrix(rpois(1000, 5), nrow = 100) rownames(counts) <- paste0(\"Gene\", seq_len(100)) colnames(counts) <- paste0(\"Cell\", seq_len(10)) seurat_obj <- CreateSeuratObject(counts = counts) #> Warning: Data is of class matrix. Coercing to dgCMatrix. seurat_obj <- NormalizeData(seurat_obj, verbose = FALSE)  # Create mock pathways mock_pathways <- list(     Pathway1 = paste0(\"Gene\", seq_len(20)),     Pathway2 = paste0(\"Gene\", 21:40),     Pathway3 = paste0(\"Gene\", 41:60) )  # Calculate pathway activities pathway_activities <- calculate_pathway_activities(     seurat_obj, mock_pathways,     verbose = FALSE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate percentage — calculate_percentage","title":"Calculate percentage — calculate_percentage","text":"Calculates percentage proper formatting.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate percentage — calculate_percentage","text":"","code":"calculate_percentage(x, total = sum(x), digits = 1)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate percentage — calculate_percentage","text":"x Numeric vector values. total Numeric value representing total. Default sum(x). digits Integer specifying number decimal places. Default 1.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_percentage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate percentage — calculate_percentage","text":"Character vector formatted percentages.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_percentage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate percentage — calculate_percentage","text":"function performs following steps: Validates input parameters Calculates percentages Formats proper decimal places Adds percentage symbol function useful : Calculating cell type percentages Formatting plot labels Reporting statistics function ensures: Proper percentage calculation Consistent decimal places Clean output format ","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_percentage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate percentage — calculate_percentage","text":"","code":"calculate_percentage(c(10, 20, 30)) #> [1] \"16.7%\" \"33.3%\" \"50.0%\""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_prediction_confidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prediction confidence scores — calculate_prediction_confidence","title":"Calculate prediction confidence scores — calculate_prediction_confidence","text":"Calculate prediction confidence scores","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_prediction_confidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prediction confidence scores — calculate_prediction_confidence","text":"","code":"calculate_prediction_confidence(new_pathway_matrix, reference_pathway_matrix)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_prediction_confidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prediction confidence scores — calculate_prediction_confidence","text":"numeric vector confidence scores 0 1 prediction. Higher values indicate confident predictions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/calculate_prediction_confidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prediction confidence scores — calculate_prediction_confidence","text":"","code":"# Example with mock predictions predictions <- matrix(c(0.8, 0.2, 0.3, 0.7), nrow = 2) confidence <- calculate_prediction_confidence(predictions) #> Error in calculate_prediction_confidence(predictions): could not find function \"calculate_prediction_confidence\" print(confidence) #> Error: object 'confidence' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/check_and_install_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and install required packages — check_and_install_packages","title":"Check and install required packages — check_and_install_packages","text":"Checks required packages installed installs . robust version load_packages() handles errors gracefully.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/check_and_install_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and install required packages — check_and_install_packages","text":"","code":"check_and_install_packages(packages, repos = getOption(\"repos\"))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/check_and_install_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and install required packages — check_and_install_packages","text":"packages Character vector package names check install. repos Character vector repository URLs. Default getOption(\"repos\").","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/check_and_install_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and install required packages — check_and_install_packages","text":"Invisible NULL. function called side effects checking installing packages. Messages printed indicate installation progress.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/check_and_install_packages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and install required packages — check_and_install_packages","text":"function performs following steps: Checks package installed using requireNamespace() Attempts install missing packages using install.packages() Handles installation errors gracefully warnings function robust load_packages() : Uses requireNamespace() instead library() Handles installation errors without stopping Provides informative warning messages","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/check_and_install_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and install required packages — check_and_install_packages","text":"","code":"check_and_install_packages(c(\"Seurat\", \"dplyr\", \"ggplot2\"))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_accuracy_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prediction accuracy plot — create_accuracy_plot","title":"Create prediction accuracy plot — create_accuracy_plot","text":"Creates bar plot showing prediction accuracy different methods conditions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_accuracy_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prediction accuracy plot — create_accuracy_plot","text":"","code":"create_accuracy_plot(   evaluation_results,   method = c(\"direct\", \"svm\"),   title = NULL,   color_palette = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_accuracy_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prediction accuracy plot — create_accuracy_plot","text":"evaluation_results List containing evaluation results evaluate_predictions(). method Character string specifying method plot (\"direct\" \"svm\"). title Character string plot title. Default NULL. color_palette Character vector. Colors use plot (default: NULL, uses default palette). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_accuracy_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create prediction accuracy plot — create_accuracy_plot","text":"ggplot object containing accuracy plot.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_accuracy_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create prediction accuracy plot — create_accuracy_plot","text":"function visualizes prediction accuracy results evaluate_predictions function. creates bar plot showing accuracy predictions across different samples conditions. function processes data differently based method parameter: \"direct\": Uses accuracy data direct similarity-based predictions \"svm\": Uses accuracy data Support Vector Machine predictions workflow includes: Validating input parameters checking required data Extracting appropriate accuracy data based method Creating bar plot accuracy percentages Adding percentage labels bar Applying custom colors provided resulting plot displays samples x-axis accuracy values y-axis, bar representing percentage correctly predicted cells sample. Text labels show exact percentage values bar. function includes comprehensive error handling catch missing data, invalid parameters, processing issues informative error messages.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_accuracy_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create prediction accuracy plot — create_accuracy_plot","text":"","code":"# Example with mock evaluation results # Create mock evaluation results structure evaluation_results <- list(     direct = list(         accuracy = data.frame(             sample = c(\"Sample1\", \"Sample2\", \"Sample3\", \"Sample4\"),             accuracy = c(85.2, 78.5, 92.1, 88.7)         )     ),     svm = list(         accuracy = data.frame(             sample = c(\"Sample1\", \"Sample2\", \"Sample3\", \"Sample4\"),             accuracy = c(87.3, 81.2, 94.5, 90.1)         )     ) )  # Create accuracy plot for direct method plot_direct <- create_accuracy_plot(evaluation_results, method = \"direct\") #> Error in create_accuracy_plot(evaluation_results, method = \"direct\"): direct_accuracy not found in evaluation_results  # Create accuracy plot for SVM method plot_svm <- create_accuracy_plot(evaluation_results, method = \"svm\") #> Error in create_accuracy_plot(evaluation_results, method = \"svm\"): svm_accuracy not found in evaluation_results"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_confusion_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create confusion matrix heatmap — create_confusion_heatmap","title":"Create confusion matrix heatmap — create_confusion_heatmap","text":"Creates heatmap visualization confusion matrix prediction results.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_confusion_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create confusion matrix heatmap — create_confusion_heatmap","text":"","code":"create_confusion_heatmap(   evaluation_results,   method = c(\"direct\", \"threshold\", \"svm\"),   title = NULL,   color_palette = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_confusion_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create confusion matrix heatmap — create_confusion_heatmap","text":"evaluation_results List containing evaluation results evaluate_predictions(). method Character string specifying method plot (\"direct\", \"threshold\", \"svm\"). title Character string plot title. Default NULL. color_palette Character vector length 2. Colors gradient (default: NULL, uses white steelblue). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_confusion_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create confusion matrix heatmap — create_confusion_heatmap","text":"ggplot object containing confusion matrix heatmap.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_confusion_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create confusion matrix heatmap — create_confusion_heatmap","text":"function creates heatmap visualization confusion matrix prediction results. confusion matrix shows counts true vs. predicted labels, helping identify categories commonly confused . function supports three different prediction methods: \"direct\": Uses confusion matrix direct similarity-based predictions \"threshold\": Uses confusion matrix threshold-based predictions \"svm\": Uses confusion matrix Support Vector Machine predictions workflow consists : Validating input parameters checking required data Extracting appropriate confusion matrix based specified method Converting matrix long-format data frame plotting Creating heatmap tile geometries Adding count labels tile Applying color gradient (customizable via color_palette) resulting heatmap displays predicted categories x-axis actual categories y-axis. cell's color intensity represents count predictions, actual count values displayed text. function implements extensive error checking ensure required data exists evaluation_results object parameters valid.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_confusion_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create confusion matrix heatmap — create_confusion_heatmap","text":"","code":"# Example with mock confusion matrix # Create a confusion matrix for 4 cell types confusion_data <- matrix(     c(         120, 5, 3, 2,         8, 95, 4, 3,         2, 6, 88, 4,         1, 2, 3, 104     ),     nrow = 4,     dimnames = list(         Actual = c(\"CellType_A\", \"CellType_B\", \"CellType_C\", \"CellType_D\"),         Predicted = c(\"CellType_A\", \"CellType_B\", \"CellType_C\", \"CellType_D\")     ) )  # Create confusion heatmap heatmap_plot <- create_confusion_heatmap(confusion_data) #> Error in create_confusion_heatmap(confusion_data): evaluation_results must be a list  # Create confusion heatmap with custom title heatmap_custom <- create_confusion_heatmap(     confusion_data,     title = \"Cell Type Prediction Accuracy\" ) #> Error in create_confusion_heatmap(confusion_data, title = \"Cell Type Prediction Accuracy\"): evaluation_results must be a list"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_dir_if_not_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create directory if it doesn't exist — create_dir_if_not_exists","title":"Create directory if it doesn't exist — create_dir_if_not_exists","text":"Creates directory exist, optional recursive creation parent directories.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_dir_if_not_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create directory if it doesn't exist — create_dir_if_not_exists","text":"","code":"create_dir_if_not_exists(dir_path, recursive = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_dir_if_not_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create directory if it doesn't exist — create_dir_if_not_exists","text":"dir_path Character string specifying directory path create. recursive Logical indicating whether create parent directories. Default TRUE.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_dir_if_not_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create directory if it doesn't exist — create_dir_if_not_exists","text":"Invisible NULL. directory created exist. function returns directory path invisibly.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_dir_if_not_exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create directory if it doesn't exist — create_dir_if_not_exists","text":"function performs following steps: Checks directory exists using dir.exists() Creates directory exist using dir.create() Optionally creates parent directories recursive TRUE function useful : Creating output directories analysis results Setting directory structures data processing Ensuring directories exist saving files","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_dir_if_not_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create directory if it doesn't exist — create_dir_if_not_exists","text":"","code":"create_dir_if_not_exists(\"./results/plots\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_metrics_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot evaluation metrics — create_evaluation_metrics_plot","title":"Plot evaluation metrics — create_evaluation_metrics_plot","text":"Creates visualizations prediction evaluation metrics. function generates various plots help understand performance cell type predictions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_metrics_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot evaluation metrics — create_evaluation_metrics_plot","text":"","code":"create_evaluation_metrics_plot(   evaluation_results,   plot_type = \"confusion\",   title = NULL,   color_palette = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_metrics_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot evaluation metrics — create_evaluation_metrics_plot","text":"evaluation_results List. Results evaluate_predictions(). plot_type Character. Type plot create. Options : \"confusion\": Confusion matrix heatmap \"metrics\": Bar plot precision, recall, F1 scores \"roc\": ROC curve (probabilities available) \"pr\": Precision-recall curve (probabilities available) title Character. Title plot (default: NULL). color_palette Character vector. Colors use plot (default: NULL, uses default palette). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_metrics_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot evaluation metrics — create_evaluation_metrics_plot","text":"ggplot object containing requested visualization.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_metrics_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot evaluation metrics — create_evaluation_metrics_plot","text":"function performs following steps: Validates input parameters data Prepares data plotting Creates requested visualization Applies custom styling specified function creates various types evaluation plots visualize prediction performance. supports four different plot types: \"confusion\": heatmap visualization confusion matrix \"metrics\": bar plot precision, recall, F1 scores \"roc\": receiver operating characteristic curve \"pr\": precision-recall curve function validates inputs checks required data specified plot type available evaluation_results. uses ggplot2 visualization applies appropriate styling formatting based plot type user-provided parameters. confusion matrix plot, cell counts shown text labels, metrics plot displays precision, recall, F1 scores customizable colors. ROC PR curves visualize classifier performance across different thresholds.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_metrics_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot evaluation metrics — create_evaluation_metrics_plot","text":"","code":"# Example with mock evaluation metrics metrics_data <- data.frame(     metric = rep(c(\"Accuracy\", \"Precision\", \"Recall\", \"F1\"), 3),     value = c(0.85, 0.82, 0.88, 0.85, 0.79, 0.77, 0.81, 0.79, 0.91, 0.89, 0.93, 0.91),     method = rep(c(\"Method1\", \"Method2\", \"Method3\"), each = 4) ) plot <- create_evaluation_metrics_plot(metrics_data) #> Error in create_evaluation_metrics_plot(metrics_data): Confusion matrix not found in evaluation_results"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Create visualization plots — create_evaluation_plots","title":"Create visualization plots — create_evaluation_plots","text":"Creates various visualization plots analysis results, including UMAP plots prediction accuracy plots.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create visualization plots — create_evaluation_plots","text":"","code":"create_evaluation_plots(   seurat_object,   results_dir = \"./results\",   color_palette = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create visualization plots — create_evaluation_plots","text":"seurat_object Seurat object containing analysis results. results_dir Character string specifying directory save plots. Default \"./results\". color_palette Character vector. Colors use plots (default: NULL, uses default palette). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create visualization plots — create_evaluation_plots","text":"NULL. Plots saved specified directory.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create visualization plots — create_evaluation_plots","text":"function automates creation standard visualization plots scCulturePredict analysis results. creates saves UMAP plot visualizing experimental data, useful exploring cell clustering patterns relationships. function performs following steps: Creates directory store results already exist Generates UMAP plot showing experimental data colored sample Saves plot PNG image specified directory Returns NULL successful execution UMAP plot visualizes cells reduced two-dimensional space, colors representing different sample conditions. visualization helps identify clusters cells similar expression profiles assess well different conditions separate reduced dimension space. function particularly useful quick generation standard plots without write custom visualization code common analysis tasks.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_evaluation_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create visualization plots — create_evaluation_plots","text":"","code":"create_evaluation_plots(seurat_object, results_dir = \"./results\") #> Error: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pathway activity boxplot — create_pathway_boxplot","title":"Create pathway activity boxplot — create_pathway_boxplot","text":"Creates boxplot visualization pathway activity across conditions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pathway activity boxplot — create_pathway_boxplot","text":"","code":"create_pathway_boxplot(activity_results, top_n = 10, title = NULL)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pathway activity boxplot — create_pathway_boxplot","text":"activity_results Data frame containing pathway activity results. top_n Integer specifying number top pathways show. Default 10. title Character string plot title. Default NULL.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pathway activity boxplot — create_pathway_boxplot","text":"ggplot object containing pathway activity boxplot.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pathway activity boxplot — create_pathway_boxplot","text":"","code":"# \\donttest{ boxplot <- create_pathway_boxplot(activity_results, top_n = 10) #> Error: object 'activity_results' not found # }"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pathway expression heatmap — create_pathway_heatmap","title":"Create pathway expression heatmap — create_pathway_heatmap","text":"Creates heatmap visualization pathway expression patterns across cells. heatmap shows mean expression genes pathway cell, allowing identification pathway activity patterns.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pathway expression heatmap — create_pathway_heatmap","text":"","code":"create_pathway_heatmap(   seurat_obj,   pathway_results,   top_n = 20,   cells.use = NULL,   title = \"Pathway Expression Heatmap\",   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pathway expression heatmap — create_pathway_heatmap","text":"seurat_obj Seurat object. Seurat object containing gene expression data. pathway_results List. Results pathway analysis containing: pathway_matrix: Matrix pathway expression values top_n Integer. Number top pathways show heatmap (default: 20). cells.use Character vector. Names cells include heatmap. NULL, uses cells (default: NULL). title Character. Title heatmap (default: \"Pathway Expression Heatmap\"). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pathway expression heatmap — create_pathway_heatmap","text":"ggplot object containing pathway expression heatmap.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create pathway expression heatmap — create_pathway_heatmap","text":"function performs following steps: Validates input parameters data Selects top pathways based significance Creates heatmap using ggplot2 Adds appropriate labels theme elements heatmap features: Pathways y-axis Cells x-axis Expression levels shown color intensity Hierarchical clustering pathways cells","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_pathway_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pathway expression heatmap — create_pathway_heatmap","text":"","code":"# \\donttest{ # Basic usage p <- create_pathway_heatmap(     seurat_obj = seurat_obj,     pathway_results = pathway_results ) #> Error: object 'seurat_obj' not found  # Show top 10 pathways p <- create_pathway_heatmap(     seurat_obj = seurat_obj,     pathway_results = pathway_results,     top_n = 10 ) #> Error: object 'seurat_obj' not found  # Use specific cells p <- create_pathway_heatmap(     seurat_obj = seurat_obj,     pathway_results = pathway_results,     cells.use = c(\"cell1\", \"cell2\", \"cell3\") ) #> Error: object 'seurat_obj' not found  # Custom title p <- create_pathway_heatmap(     seurat_obj = seurat_obj,     pathway_results = pathway_results,     title = \"My Custom Heatmap\" ) #> Error: object 'seurat_obj' not found # }"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_umap_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create UMAP visualization — create_umap_plot","title":"Create UMAP visualization — create_umap_plot","text":"Creates UMAP plot single-cell data customizable aesthetics.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_umap_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create UMAP visualization — create_umap_plot","text":"","code":"create_umap_plot(   seurat_object,   color_by = \"sample\",   point_size = 0.8,   title = \"UMAP Visualization\",   legend_title = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_umap_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create UMAP visualization — create_umap_plot","text":"seurat_object Seurat object containing UMAP coordinates metadata. color_by Character string specifying metadata column color points . Default \"sample\". point_size Numeric value point size. Default 0.8. title Character string plot title. Default \"UMAP Visualization\". legend_title Character string legend title. Default NULL (uses color_by). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_umap_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create UMAP visualization — create_umap_plot","text":"ggplot object containing UMAP visualization.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_umap_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create UMAP visualization — create_umap_plot","text":"function generates UMAP (Uniform Manifold Approximation Projection) visualization Seurat object. requires UMAP coordinates already computed stored metadata \"UMAP_1\" \"UMAP_2\". function performs following steps: Validates input parameters ensure meet requirements Checks presence UMAP coordinates metadata Creates ggplot object UMAP coordinates Customizes plot appearance based provided parameters Returns plot customization direct display returned ggplot object can customized using standard ggplot2 functions themes. example, can add additional layers, change color scales, modify themes. Error handling ensures invalid inputs caught early informative error messages, making function robust interactive programmatic use.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/create_umap_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create UMAP visualization — create_umap_plot","text":"","code":"# Example saving plots to temporary directory temp_dir <- tempdir() plots_list <- list(     plot1 = ggplot2::ggplot(mtcars, ggplot2::aes(x = mpg, y = wt)) +         ggplot2::geom_point(),     plot2 = ggplot2::ggplot(iris, ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +         ggplot2::geom_point() ) save_visualization_plots(plots_list, output_dir = temp_dir) #> Error in save_visualization_plots(plots_list, output_dir = temp_dir): seurat_object must be a Seurat object # Clean up unlink(file.path(temp_dir, \"*.png\"))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/detect_scCulture_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect scCulture Analysis Mode — detect_scCulture_mode","title":"Detect scCulture Analysis Mode — detect_scCulture_mode","text":"Detect scCulture Analysis Mode","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/detect_scCulture_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect scCulture Analysis Mode — detect_scCulture_mode","text":"","code":"detect_scCulture_mode(scCulture_results)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/detect_scCulture_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect scCulture Analysis Mode — detect_scCulture_mode","text":"character string indicating detected analysis mode: either 'BUILD' (training labeled data) 'PREDICT' (prediction unlabeled data).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/detect_scCulture_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect scCulture Analysis Mode — detect_scCulture_mode","text":"","code":"# Check mode based on column names columns <- c(\"gene\", \"cell\", \"culture_condition\") mode <- detect_scCulture_mode(columns) #> Error in detect_scCulture_mode(columns): could not find function \"detect_scCulture_mode\" print(mode) #> function (x)  #> { #>     if (is.expression(x))  #>         return(\"expression\") #>     if (is.call(x))  #>         return(switch(deparse(x[[1L]])[1L], `(` = \"(\", \"call\")) #>     if (is.name(x))  #>         \"name\" #>     else switch(tx <- typeof(x), double = , integer = \"numeric\",  #>         closure = , builtin = , special = \"function\", tx) #> } #> <bytecode: 0x556dd86cc450> #> <environment: namespace:base> # \\donttest{ # Example requires a Seurat object with predictions # plots <- create_build_plots(seurat_obj, output_dir = tempdir()) # }"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_cell_type_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate prediction performance — evaluate_cell_type_predictions","title":"Evaluate prediction performance — evaluate_cell_type_predictions","text":"Evaluates performance cell type predictions using various metrics. function calculates accuracy, precision, recall, F1 score, confusion matrix predictions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_cell_type_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate prediction performance — evaluate_cell_type_predictions","text":"","code":"evaluate_cell_type_predictions(   seurat_obj,   predictions,   true_labels_col = \"cell_type\",   metrics = c(\"accuracy\", \"precision\", \"recall\", \"f1\", \"confusion_matrix\"),   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_cell_type_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate prediction performance — evaluate_cell_type_predictions","text":"seurat_obj Seurat object. Seurat object containing true cell type labels. predictions Character vector. Predicted cell type labels. true_labels_col Character. Name metadata column containing true cell type labels (default: \"cell_type\"). metrics Character vector. Metrics calculate. Options \"accuracy\", \"precision\", \"recall\", \"f1\", \"confusion_matrix\" (default: ). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_cell_type_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate prediction performance — evaluate_cell_type_predictions","text":"list containing requested evaluation metrics: accuracy: Overall prediction accuracy precision: Precision cell type recall: Recall cell type f1: F1 score cell type confusion_matrix: Confusion matrix predictions vs true labels","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_cell_type_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate prediction performance — evaluate_cell_type_predictions","text":"function performs following steps: Validates input parameters data Extracts true labels Seurat object Calculates requested metrics Returns evaluation results","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_cell_type_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate prediction performance — evaluate_cell_type_predictions","text":"","code":"# Example with mock predictions # Create mock true and predicted labels set.seed(123) true_labels <- factor(sample(c(\"TypeA\", \"TypeB\", \"TypeC\"), 100, replace = TRUE)) predicted_labels <- factor(sample(c(\"TypeA\", \"TypeB\", \"TypeC\"), 100, replace = TRUE))  # Create mock Seurat object with predictions library(Seurat) counts <- matrix(rpois(1000, 5), nrow = 100) rownames(counts) <- paste0(\"Gene\", seq_len(100)) colnames(counts) <- paste0(\"Cell\", seq_len(10)) metadata <- data.frame(     true_cell_type = rep(c(\"TypeA\", \"TypeB\"), each = 5),     predicted_cell_type = rep(c(\"TypeA\", \"TypeB\"), 5) ) seurat_obj <- CreateSeuratObject(counts = counts, meta.data = metadata) #> Warning: Data is of class matrix. Coercing to dgCMatrix.  # Evaluate predictions evaluation <- evaluate_cell_type_predictions(     seurat_obj,     true_labels_col = \"true_cell_type\",     pred_labels_col = \"predicted_cell_type\" ) #> Error in evaluate_cell_type_predictions(seurat_obj, true_labels_col = \"true_cell_type\",     pred_labels_col = \"predicted_cell_type\"): unused argument (pred_labels_col = \"predicted_cell_type\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate prediction results — evaluate_predictions","title":"Evaluate prediction results — evaluate_predictions","text":"Evaluates performance different prediction methods computing confusion matrices, accuracy metrics, statistical tests.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate prediction results — evaluate_predictions","text":"","code":"evaluate_predictions(seurat_object)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate prediction results — evaluate_predictions","text":"seurat_object Seurat object containing prediction results metadata.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate prediction results — evaluate_predictions","text":"list containing: direct_table: Confusion matrix direct predictions threshold_table: Confusion matrix threshold-based predictions svm_table: Confusion matrix SVM predictions direct_accuracy: Accuracy metrics direct predictions svm_accuracy: Accuracy metrics SVM predictions chi_direct: Chi-squared test results direct predictions chi_svm: Chi-squared test results SVM predictions","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate prediction results — evaluate_predictions","text":"function performs comprehensive evaluation prediction results comparing predicted cell culture media conditions actual conditions. supports multiple prediction methods including direct similarity-based, threshold-based, SVM predictions. evaluation process includes: Computing confusion matrices prediction method Calculating accuracy metrics (total correct, percentage) sample Performing chi-squared tests assess statistical significance Organizing results structured list easy access Confusion matrices show relationship actual predicted conditions, revealing conditions commonly confused . Accuracy metrics provide overall assessment prediction performance, chi-squared tests determine whether predictions significantly better random chance. function expects prediction results stored Seurat object metadata following column names: \"predicted_sample_1\": Direct similarity-based predictions \"predicted_sample_2\": Threshold-based predictions \"classification_pred\": SVM-based predictions","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/evaluate_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate prediction results — evaluate_predictions","text":"","code":"evaluation_results <- evaluate_predictions(seurat_object) #> Error: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/format_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numeric values — format_number","title":"Format numeric values — format_number","text":"Formats numeric values specified number decimal places.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/format_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numeric values — format_number","text":"","code":"format_number(x, digits = 2)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/format_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numeric values — format_number","text":"x Numeric vector format. digits Integer specifying number decimal places. Default 2.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/format_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numeric values — format_number","text":"Character vector formatted numbers.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/format_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format numeric values — format_number","text":"function performs following steps: Validates input parameters Formats numbers using sprintf() Returns formatted character vector function useful : Formatting p-values Formatting statistics Formatting plot labels function ensures: Consistent decimal places Proper rounding Clean output format","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/format_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numeric values — format_number","text":"","code":"format_number(c(1.23456, 2.34567), digits = 2) #> [1] \"1.23\" \"2.35\""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_best_data_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Get best available data layer from Seurat object — get_best_data_layer","title":"Get best available data layer from Seurat object — get_best_data_layer","text":"Helper function determine best available data layer FetchData. Checks normalized data layers falls back counts needed. Handles Seurat v4 v5 layer structures.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_best_data_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get best available data layer from Seurat object — get_best_data_layer","text":"","code":"get_best_data_layer(seurat_object)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_best_data_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get best available data layer from Seurat object — get_best_data_layer","text":"seurat_object Seurat object","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_best_data_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get best available data layer from Seurat object — get_best_data_layer","text":"Character string specifying best layer use","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_best_data_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get best available data layer from Seurat object — get_best_data_layer","text":"","code":"# Example with mock KEG file content keg_content <- c(     \"ENTRY       hsa00010                    Pathway\",     \"NAME        Glycolysis / Gluconeogenesis\",     \"GENE        1234  HK1; hexokinase 1\",     \"GENE        5678  GPI; glucose-6-phosphate isomerase\",     \"///\" ) temp_file <- tempfile(fileext = \".keg\") writeLines(keg_content, temp_file) kegg_data <- parse_kegg_keg(temp_file) print(kegg_data) #> list() unlink(temp_file)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_file_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file extension — get_file_extension","title":"Get file extension — get_file_extension","text":"Extracts file extension file path.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_file_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file extension — get_file_extension","text":"","code":"get_file_extension(file_path)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_file_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file extension — get_file_extension","text":"file_path Character string specifying file path.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_file_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file extension — get_file_extension","text":"Character string containing file extension (without dot).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_file_extension.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get file extension — get_file_extension","text":"function performs following steps: Uses tools::file_ext() extract extension Returns extension without leading dot function useful : File type validation File processing File organization function ensures: Consistent extension format leading dot output Proper handling files without extensions","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/get_file_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file extension — get_file_extension","text":"","code":"get_file_extension(\"data.csv\") #> [1] \"csv\""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/is_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is empty — is_empty","title":"Check if object is empty — is_empty","text":"Checks object empty (NULL, NA, empty vector, empty data frame).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/is_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is empty — is_empty","text":"","code":"is_empty(x)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/is_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is empty — is_empty","text":"x Object check.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/is_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is empty — is_empty","text":"Logical value indicating whether object empty.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/is_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if object is empty — is_empty","text":"function performs following checks order: Checks object NULL Checks object length 0 Checks object empty data frame Checks values NA function useful : Validating function inputs Checking data frame contents Handling edge cases function handles: NULL values Empty vectors Empty data frames NA values","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/is_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is empty — is_empty","text":"","code":"is_empty(NULL) #> [1] TRUE is_empty(c()) #> [1] TRUE is_empty(data.frame()) #> [1] TRUE"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load single-cell data — load_data","title":"Load single-cell data — load_data","text":"Loads single-cell data directory containing count matrix, metadata, barcodes. First attempts use shell script file preparation, falling back R-based preparation script fails. Automatically validates malformed input files.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load single-cell data — load_data","text":"","code":"load_data(   data_dir,   experiment_id,   use_shell_script = TRUE,   metadata_file = NULL,   counts_file = NULL,   min_cells = 3,   min_features = 200,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load single-cell data — load_data","text":"data_dir Character string specifying directory containing data files. directory contain files following naming pattern: <experiment_id>_metadata.csv - Cell metadata file <experiment_id>_counts.csv - Gene expression count matrix experiment_id Character string specifying experiment ID prefix filenames. match prefix used data files. use_shell_script Logical indicating whether use shell script file preparation. TRUE, attempts use shell script first, falling back R-based preparation fails. Default TRUE. metadata_file Character string specifying name metadata file. NULL, automatically detected based experiment_id. counts_file Character string specifying name counts file. NULL, automatically detected based experiment_id. min_cells Integer specifying minimum number cells expressing gene gene included. Default 3. min_features Integer specifying minimum number genes expressed cell cell included. Default 200. verbose Logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load single-cell data — load_data","text":"Seurat object containing: Count matrix counts slot Cell metadata meta.data slot Filtered genes cells based min_cells min_features","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load single-cell data — load_data","text":"function performs following steps: Validates input parameters file existence Automatically detects metadata counts files specified Loads validates metadata counts data Checks data consistency (matching cell numbers) Creates Seurat object appropriate filtering","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load single-cell data — load_data","text":"","code":"# Example with temporary files # Create temporary directory and files temp_dir <- tempdir() exp_id <- \"test_exp\"  # Create mock counts file counts_data <- matrix(rpois(500, 5), nrow = 50) rownames(counts_data) <- paste0(\"Gene\", seq_len(50)) colnames(counts_data) <- paste0(\"Cell\", seq_len(10)) counts_file <- file.path(temp_dir, paste0(exp_id, \"_counts.csv\")) write.csv(counts_data, counts_file)  # Create mock metadata file metadata <- data.frame(     cell_id = colnames(counts_data),     sample = rep(c(\"Sample1\", \"Sample2\"), each = 5) ) metadata_file <- file.path(temp_dir, paste0(exp_id, \"_metadata.csv\")) write.csv(metadata, metadata_file, row.names = FALSE)  # Load the data seurat_obj <- load_data(     data_dir = temp_dir,     experiment_id = exp_id,     use_shell_script = FALSE ) #> Detecting data format... #> CSV format detected #> Loading CSV format data... #> Loading counts data... #> Creating Seurat object... #> Warning: Data is of class data.frame. Coercing to dgCMatrix. #> Error in value[[3L]](cond): Error creating Seurat object: invalid class “LogMap” object: Rownames must be supplied  # Clean up unlink(counts_file) unlink(metadata_file)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Load R object from file — load_object","title":"Load R object from file — load_object","text":"Loads R object file error handling.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load R object from file — load_object","text":"","code":"load_object(file_path)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load R object from file — load_object","text":"file_path Character string specifying file path.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load R object from file — load_object","text":"loaded R object.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load R object from file — load_object","text":"function performs following steps: Checks file exists Loads object using readRDS() Handles errors informative messages function useful : Loading saved Seurat objects Loading analysis results Loading intermediate data function ensures: file exists loading Errors caught reported loaded object returned","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load R object from file — load_object","text":"","code":"seurat_object <- load_object(\"./results/seurat_object.rds\") #> Error in load_object(\"./results/seurat_object.rds\"): File not found: ./results/seurat_object.rds"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Load required packages for scCulturePredict — load_packages","title":"Load required packages for scCulturePredict — load_packages","text":"Loads required packages scCulturePredict package. package installed, installed automatically.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load required packages for scCulturePredict — load_packages","text":"","code":"load_packages(verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load required packages for scCulturePredict — load_packages","text":"verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load required packages for scCulturePredict — load_packages","text":"Invisible NULL. function called side effects loading required packages current R session.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/load_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load required packages for scCulturePredict — load_packages","text":"","code":"load_packages() #> Loading package: Seurat #> Loading package: dplyr #> Loading package: ggplot2 #> Warning: Package tidyverse is not installed. Please install it manually: install.packages('tidyverse') #> Loading package: tidyverse #> Loading package: MASS #> Loading package: e1071 #> Loading package: caret #> Registered S3 method overwritten by 'pROC': #>   method   from             #>   plot.roc spatstat.explore"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/parse_kegg_keg.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse KEGG pathway file — parse_kegg_keg","title":"Parse KEGG pathway file — parse_kegg_keg","text":"Parses KEGG pathway file (.keg) extracts gene names pathway.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/parse_kegg_keg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse KEGG pathway file — parse_kegg_keg","text":"","code":"parse_kegg_keg(file_path = \"sce00001.keg\", verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/parse_kegg_keg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse KEGG pathway file — parse_kegg_keg","text":"file_path Character string specifying path KEGG pathway file. Default \"sce00001.keg\". verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/parse_kegg_keg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse KEGG pathway file — parse_kegg_keg","text":"list element character vector gene names pathway.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/parse_kegg_keg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse KEGG pathway file — parse_kegg_keg","text":"","code":"# Example with mock KEG file # Create a temporary KEG file keg_content <- c(     \"ENTRY       hsa00010                    Pathway\",     \"NAME        Glycolysis / Gluconeogenesis - Homo sapiens (human)\",     \"DESCRIPTION Glycolysis is the process of converting glucose into pyruvate\",     \"CLASS       Metabolism; Carbohydrate metabolism\",     \"PATHWAY_MAP hsa00010  Glycolysis / Gluconeogenesis\",     \"GENE        5213  PFKM; phosphofructokinase, muscle [KO:K00850] [EC:2.7.1.11]\",     \"GENE        5214  PFKL; phosphofructokinase, liver [KO:K00850] [EC:2.7.1.11]\",     \"GENE        5211  PFKP; phosphofructokinase, platelet [KO:K00850] [EC:2.7.1.11]\",     \"///\" )  temp_file <- tempfile(fileext = \".keg\") writeLines(keg_content, temp_file)  # Parse the KEG file kegg_data <- parse_kegg_keg(temp_file) print(names(kegg_data)) #> NULL print(kegg_data$genes[1:3]) #> NULL  # Clean up unlink(temp_file)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_dimensionality_reduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform dimensionality reduction pipeline — perform_dimensionality_reduction","title":"Perform dimensionality reduction pipeline — perform_dimensionality_reduction","text":"Performs complete dimensionality reduction pipeline including PCA, UMAP, t-SNE Seurat object.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_dimensionality_reduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform dimensionality reduction pipeline — perform_dimensionality_reduction","text":"","code":"perform_dimensionality_reduction(   seurat_object,   n_pcs = 50,   dims = 1:40,   perform_tsne = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_dimensionality_reduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform dimensionality reduction pipeline — perform_dimensionality_reduction","text":"seurat_object Seurat object containing preprocessed single-cell data. n_pcs Integer specifying number principal components compute. Default 50. dims Integer vector specifying PCA dimensions use UMAP t-SNE. Default seq_len(40). perform_tsne Logical indicating whether perform t-SNE. Default TRUE.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_dimensionality_reduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform dimensionality reduction pipeline — perform_dimensionality_reduction","text":"list containing: seurat_object: Seurat object dimensionality reduction results pca_results: Results PCA analysis","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_dimensionality_reduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform dimensionality reduction pipeline — perform_dimensionality_reduction","text":"","code":"results <- perform_dimensionality_reduction(seurat_object) #> Error: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PCA analysis — perform_pca","title":"Perform PCA analysis — perform_pca","text":"Performs Principal Component Analysis (PCA) Seurat object returns results along variance explained principal component.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PCA analysis — perform_pca","text":"","code":"perform_pca(seurat_object, n_pcs = 50, features = NULL)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PCA analysis — perform_pca","text":"seurat_object Seurat object containing preprocessed single-cell data. n_pcs Integer specifying number principal components compute. Default 50. features Character vector specifying features use PCA. NULL, uses variable features. Default NULL.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PCA analysis — perform_pca","text":"list containing: seurat_object: Seurat object PCA results variance_explained: Data frame variance explained PC elbow_plot: ggplot object showing elbow plot","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PCA analysis — perform_pca","text":"","code":"pca_results <- perform_pca(seurat_object, n_pcs = 50) #> Error: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_tsne.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform t-SNE dimensionality reduction — perform_tsne","title":"Perform t-SNE dimensionality reduction — perform_tsne","text":"Performs t-Distributed Stochastic Neighbor Embedding (t-SNE) Seurat object using PCA results input.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_tsne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform t-SNE dimensionality reduction — perform_tsne","text":"","code":"perform_tsne(seurat_object, dims = 1:40, perplexity = 30, max_iter = 1000)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_tsne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform t-SNE dimensionality reduction — perform_tsne","text":"seurat_object Seurat object containing PCA results. dims Integer vector specifying PCA dimensions use. Default seq_len(40). perplexity Numeric value specifying perplexity parameter. Default 30. max_iter Integer specifying maximum number iterations. Default 1000.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_tsne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform t-SNE dimensionality reduction — perform_tsne","text":"Seurat object t-SNE coordinates added metadata.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/perform_tsne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform t-SNE dimensionality reduction — perform_tsne","text":"","code":"seurat_object <- perform_tsne(seurat_object, dims = seq_len(40)) #> Error: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/plot_scCulture.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot scCulture Results — plot_scCulture","title":"Plot scCulture Results — plot_scCulture","text":"Automatically generates appropriate visualizations scCulture analysis results. Detects whether results BUILD PREDICT mode creates corresponding plots.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/plot_scCulture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot scCulture Results — plot_scCulture","text":"","code":"plot_scCulture(   scCulture_results,   plot_type = NULL,   point_size = 1.5,   point_alpha = NULL,   return_data = FALSE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/plot_scCulture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot scCulture Results — plot_scCulture","text":"scCulture_results List. Results object returned scCulture() function. Must contain seurat_object mode information. plot_type Character. Type plot generate. BUILD mode: \"accuracy\" (default). PREDICT mode: \"\" (default), \"predictions\", \"confidence\". point_size Numeric. Size points UMAP plots (default: 1.5). point_alpha Numeric. Transparency points (default: 0.7 BUILD, 0.8 PREDICT). return_data Logical. TRUE, returns data used plotting instead plots (default: FALSE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/plot_scCulture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot scCulture Results — plot_scCulture","text":"BUILD mode: ggplot object showing prediction accuracy UMAP. PREDICT mode: list ggplot objects containing predictions confidence plots (default),   single ggplot object plot_type \"predictions\" \"confidence\". return_data = TRUE, returns data frame used plotting.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/plot_scCulture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot scCulture Results — plot_scCulture","text":"function automatically detects analysis mode scCulture results generates appropriate visualizations: **BUILD Mode Plots:** **Accuracy Plot**: UMAP colored prediction accuracy (blue = correct, red = incorrect) Shows well trained model performs training data Helps identify regions model struggles **PREDICT Mode Plots:** **Plots (default)**: Returns predictions confidence plots list **Predictions Plot**: UMAP colored predicted culture medium (single plot) **Confidence Plot**: UMAP colored prediction confidence scores (single plot) function extracts UMAP coordinates relevant metadata Seurat object within scCulture results. handles missing data gracefully provides informative error messages common issues.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/plot_scCulture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot scCulture Results — plot_scCulture","text":"","code":"# Example with mock scCulture results # Create mock result structure mock_results <- list(     predictions = data.frame(         cell_id = paste0(\"Cell\", seq_len(100)),         predicted_culture = sample(c(\"Culture1\", \"Culture2\", \"Culture3\"), 100, replace = TRUE),         confidence = runif(100, 0.6, 0.95)     ),     umap_coords = data.frame(         UMAP_1 = rnorm(100),         UMAP_2 = rnorm(100)     ) ) class(mock_results) <- \"scCulture\"  # Create visualization plot <- plot_scCulture(mock_results, plot_type = \"confidence\") #> Error in plot_scCulture(mock_results, plot_type = \"confidence\"): scCulture_results must contain a 'seurat_object' component"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict growth media by similarity — predict_by_similarity","title":"Predict growth media by similarity — predict_by_similarity","text":"Predicts growth media conditions based cosine similarity pathway expression condition-specific signatures.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict growth media by similarity — predict_by_similarity","text":"","code":"predict_by_similarity(   pathway_matrix,   signature_matrix,   threshold = 0.1,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict growth media by similarity — predict_by_similarity","text":"pathway_matrix Matrix pathway expression values. signature_matrix Matrix condition-specific signature profiles. threshold Numeric threshold similarity-based predictions. Default 0.1. verbose Logical indicating whether print progress messages. Default TRUE.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict growth media by similarity — predict_by_similarity","text":"list containing: similarity_matrix: Matrix cosine similarities predicted_direct: Direct predictions (highest similarity) predicted_threshold: Threshold-based predictions","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict growth media by similarity — predict_by_similarity","text":"function implements similarity-based approach predicting growth media conditions comparing pathway expression patterns known signatures. uses cosine similarity metric comparison, measures cosine angle two vectors. function performs following steps: Normalizes input pathway expression matrix standardize values Calculates cosine similarity cell's pathway expression condition signature Creates similarity matrix cells rows conditions columns Makes direct predictions selecting condition highest similarity cell Makes threshold-based predictions, returning NA maximum similarity threshold Cosine similarity ranges -1 (completely opposite) 1 (identical direction), 0 indicating orthogonality (relationship). threshold parameter allows control prediction stringency - higher values require stronger similarity prediction.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict growth media by similarity — predict_by_similarity","text":"","code":"# Example with mock data # Create mock pathway activity matrix pathway_activity <- matrix(     rnorm(150, mean = 0, sd = 1),     nrow = 15,     dimnames = list(         paste0(\"Cell\", seq_len(15)),         paste0(\"Pathway\", seq_len(10))     ) )  # Create mock fingerprint profiles fingerprint_profiles <- matrix(     rnorm(30, mean = 0, sd = 0.5),     nrow = 3,     dimnames = list(         c(\"CultureA\", \"CultureB\", \"CultureC\"),         paste0(\"Pathway\", seq_len(10))     ) )  # Make predictions predictions <- predict_by_similarity(     pathway_activity,     fingerprint_profiles ) #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Error in if (max(row) > threshold) colnames(signature_matrix)[which.max(row)] else NA: missing value where TRUE/FALSE needed  # Check results print(head(predictions)) #> Error: object 'predictions' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_svm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict growth media using SVM — predict_by_svm","title":"Predict growth media using SVM — predict_by_svm","text":"Predicts growth media conditions using Support Vector Machine (SVM) classification.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_svm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict growth media using SVM — predict_by_svm","text":"","code":"predict_by_svm(pathway_matrix, seurat_object, verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_svm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict growth media using SVM — predict_by_svm","text":"pathway_matrix Matrix pathway expression values. seurat_object Seurat object containing single-cell data. verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_svm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict growth media using SVM — predict_by_svm","text":"list containing: predictions: SVM predictions cells svm_model: Trained SVM model confusion_matrix: Confusion matrix test set accuracy: Overall accuracy test set","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_svm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict growth media using SVM — predict_by_svm","text":"function implements machine learning approach predicting growth media conditions using Support Vector Machine (SVM) classification. Unlike similarity-based methods, SVM can capture complex, non-linear relationships pathway expression patterns growth conditions. workflow consists : Preparing data removing NA values combining condition labels Splitting data training (80 Scaling features standardize range distribution Training SVM model radial basis function kernel Making predictions full dataset Evaluating model performance test set radial basis function kernel allows SVM capture non-linear relationships data, potentially improving prediction accuracy linear methods. function handles data preparation, model training, prediction, evaluation integrated workflow.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_by_svm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict growth media using SVM — predict_by_svm","text":"","code":"svm_results <- predict_by_svm(pathway_matrix, seurat_object) #> Error: object 'pathway_matrix' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_cell_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict cell types using pathway activity — predict_cell_types","title":"Predict cell types using pathway activity — predict_cell_types","text":"Predicts cell types based pathway activity patterns using trained classifier. function takes Seurat object pathway activity data, returns predicted cell type labels cell.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_cell_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict cell types using pathway activity — predict_cell_types","text":"","code":"predict_cell_types(   seurat_object,   pathway_activity,   classifier,   probability = FALSE,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_cell_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict cell types using pathway activity — predict_cell_types","text":"seurat_object Seurat object containing gene expression data. pathway_activity Matrix. Pathway activity matrix rows pathways columns cells. classifier Trained classifier object. Must predict method. probability Logical. Whether return prediction probabilities (default: FALSE). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_cell_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict cell types using pathway activity — predict_cell_types","text":"probability FALSE, returns character vector predicted cell types.   probability TRUE, returns list containing: predictions: Character vector predicted cell types probabilities: Matrix prediction probabilities","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_cell_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict cell types using pathway activity — predict_cell_types","text":"function applies pre-trained classifier predict cell types based pathway activity patterns. designed work classifiers trained using train_cell_type_classifier function, can work classifier predict method. function performs several validation checks ensure inputs valid: Validates seurat_object proper Seurat object Validates pathway_activity matrix data frame correct dimensions Checks number cells matches pathway_activity seurat_object Verifies classifier predict method Ensures required pathways present pathway_activity matrix validation, function: Extracts relevant pathway activity patterns based classifier's feature importance Transposes data format expected classifier Makes predictions using classifier's predict method probability=TRUE, returns class predictions probability estimates probability=FALSE, returns class predictions Error handling implemented throughout provide informative error messages step fails, making function robust interactive programmatic use.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/predict_cell_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict cell types using pathway activity — predict_cell_types","text":"","code":"# Example with mock data # Create mock Seurat object library(Seurat) counts <- matrix(rpois(1000, 5), nrow = 100) rownames(counts) <- paste0(\"Gene\", seq_len(100)) colnames(counts) <- paste0(\"Cell\", seq_len(10)) seurat_obj <- CreateSeuratObject(counts = counts) #> Warning: Data is of class matrix. Coercing to dgCMatrix. seurat_obj <- NormalizeData(seurat_obj, verbose = FALSE)  # Create mock pathway activities pathway_activities <- matrix(     rnorm(50, mean = 0, sd = 1),     nrow = 10,     dimnames = list(         colnames(seurat_obj),         paste0(\"Pathway\", seq_len(5))     ) )  # Create mock models list mock_fingerprints <- matrix(     rnorm(15, mean = 0, sd = 0.5),     nrow = 3,     dimnames = list(         c(\"TypeA\", \"TypeB\", \"TypeC\"),         paste0(\"Pathway\", seq_len(5))     ) )  models_list <- list(     direct = list(fingerprints = mock_fingerprints),     pathway_activities = pathway_activities )  # Predict cell types predictions <- predict_cell_types(     seurat_obj,     models_list,     method = \"direct\" ) #> Error in predict_cell_types(seurat_obj, models_list, method = \"direct\"): unused argument (method = \"direct\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/prepare_files_for_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare files for Seurat compatibility — prepare_files_for_seurat","title":"Prepare files for Seurat compatibility — prepare_files_for_seurat","text":"Prepares input files Seurat copying renaming match Seurat's requirements. Also handles malformed files removing problematic first rows.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/prepare_files_for_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare files for Seurat compatibility — prepare_files_for_seurat","text":"","code":"prepare_files_for_seurat(input_dir, output_dir, experiment_id, verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/prepare_files_for_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare files for Seurat compatibility — prepare_files_for_seurat","text":"input_dir Character string specifying directory containing original files output_dir Character string specifying directory prepared files experiment_id Character string specifying experiment ID prefix filenames verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/prepare_files_for_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare files for Seurat compatibility — prepare_files_for_seurat","text":"Character string path prepared directory","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/prepare_files_for_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare files for Seurat compatibility — prepare_files_for_seurat","text":"","code":"# \\donttest{ # Example with temporary directory tmp_dir <- tempdir() # Assume files exist in tmp_dir # prepare_files_for_seurat(tmp_dir, \"experiment1\") # }"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/preprocess_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess single-cell data — preprocess_data","title":"Preprocess single-cell data — preprocess_data","text":"Performs standard preprocessing steps Seurat object including normalization, variable feature selection, scaling. function implements standard Seurat workflow single-cell RNA-seq data preprocessing.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/preprocess_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess single-cell data — preprocess_data","text":"","code":"preprocess_data(   seurat_obj,   n_features = 2000,   scale_factor = 10000,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/preprocess_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess single-cell data — preprocess_data","text":"seurat_obj Seurat object. Seurat object preprocess. n_features Integer. Number variable features select (default: 2000). informative genes used downstream analysis. scale_factor Numeric. Scale factor data scaling (default: 10000). used normalization step scale data common total. verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/preprocess_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess single-cell data — preprocess_data","text":"processed Seurat object containing: Normalized data data slot Scaled data scale.data slot Variable features identified stored object","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/preprocess_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocess single-cell data — preprocess_data","text":"function performs following steps: Normalizes data using LogNormalize method Identifies variable features using vst method Scales data genes normalization step: Normalizes gene expression values cell Uses scale factor 10,000 default Applies log transformation variable feature selection: Uses vst method identify highly variable genes Selects top 2000 genes default genes used downstream analysis scaling step: Centers scales data Makes genes comparable across cells Prepares data dimensionality reduction","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/preprocess_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess single-cell data — preprocess_data","text":"","code":"# Example with mock Seurat object library(Seurat) # Create minimal mock data counts <- matrix(rpois(1000, 5), nrow = 100) rownames(counts) <- paste0(\"Gene\", seq_len(100)) colnames(counts) <- paste0(\"Cell\", seq_len(10)) metadata <- data.frame(     row.names = colnames(counts),     condition = rep(c(\"A\", \"B\"), each = 5) ) seurat_obj <- CreateSeuratObject(counts = counts, meta.data = metadata) #> Warning: Data is of class matrix. Coercing to dgCMatrix.  # Preprocess the data processed_obj <- preprocess_data(     seurat_obj,     normalization_method = \"LogNormalize\" ) #> Error in preprocess_data(seurat_obj, normalization_method = \"LogNormalize\"): unused argument (normalization_method = \"LogNormalize\")"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/process_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Process metadata for Seurat object — process_metadata","title":"Process metadata for Seurat object — process_metadata","text":"Internal helper function process metadata barcodes Seurat object","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/process_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process metadata for Seurat object — process_metadata","text":"","code":"process_metadata(seurat_object, metadata, barcodes)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/process_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process metadata for Seurat object — process_metadata","text":"seurat_object Seurat object metadata Data frame containing metadata barcodes Data frame containing barcodes","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/process_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process metadata for Seurat object — process_metadata","text":"Seurat object processed metadata","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/process_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process metadata for Seurat object — process_metadata","text":"","code":"# Example with sample metadata metadata <- data.frame(     cell_id = c(\"cell1\", \"cell2\", \"cell3\"),     condition = c(\"ctrl\", \"treated\", \"ctrl\") ) processed <- process_metadata(metadata) #> Error in process_metadata(metadata): could not find function \"process_metadata\" head(processed) #> Error: object 'processed' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/reduce_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce dimensions of single-cell data — reduce_dimensions","title":"Reduce dimensions of single-cell data — reduce_dimensions","text":"Performs dimensionality reduction using PCA UMAP Seurat object. Optionally performs t-SNE analysis.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/reduce_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce dimensions of single-cell data — reduce_dimensions","text":"","code":"reduce_dimensions(seurat_object, perform_tsne = TRUE, verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/reduce_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce dimensions of single-cell data — reduce_dimensions","text":"seurat_object Seurat object containing preprocessed single-cell data. perform_tsne Logical indicating whether perform t-SNE. Default TRUE. verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/reduce_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce dimensions of single-cell data — reduce_dimensions","text":"Seurat object PCA UMAP coordinates added metadata. perform_tsne TRUE, t-SNE coordinates also added.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/reduce_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce dimensions of single-cell data — reduce_dimensions","text":"","code":"seurat_object <- reduce_dimensions(seurat_object) #> Running PCA... #> Error: object 'seurat_object' not found seurat_object <- reduce_dimensions(seurat_object, perform_tsne = FALSE, verbose = FALSE) #> Error: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_build_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for build mode — run_build_mode","title":"Helper function for build mode — run_build_mode","text":"Helper function build mode","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_build_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for build mode — run_build_mode","text":"","code":"run_build_mode(seurat_object, kegg_file, output_dir, progress, pb, verbose)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_build_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for build mode — run_build_mode","text":"list containing complete results BUILD mode analysis: seurat_object Seurat object predictions evaluation metadata models List containing trained direct SVM classification models evaluation_results List accuracy metrics, confusion matrices, performance statistics plots Named list generated visualization plots fingerprints Matrix calculated transcriptomic fingerprints culture condition pathway_activities Matrix pathway activity scores used training","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_build_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for build mode — run_build_mode","text":"","code":"# \\donttest{ # Example requires prepared data files # result <- run_build_mode(data_dir = \"path/to/data\", #                         experiment_id = \"exp1\", #                         output_dir = tempdir()) # } # \\donttest{ # Example requires reference data and query data # result <- run_predict_mode(ref_data_dir = \"path/to/ref\", #                           query_data_dir = \"path/to/query\", #                           output_dir = tempdir()) # }"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Run UMAP dimensionality reduction — run_umap","title":"Run UMAP dimensionality reduction — run_umap","text":"Performs Uniform Manifold Approximation Projection (UMAP) Seurat object using PCA results input. UMAP dimensionality reduction technique preserves local global structure data.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run UMAP dimensionality reduction — run_umap","text":"","code":"run_umap(   seurat_obj,   n_neighbors = 30,   min_dist = 0.3,   n_components = 2,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run UMAP dimensionality reduction — run_umap","text":"seurat_obj Seurat object. Seurat object run UMAP . n_neighbors Integer. Number neighbors UMAP (default: 30). parameter controls UMAP balances local versus global structure. Lower values preserve local structure, higher values preserve global structure. min_dist Numeric. Minimum distance UMAP (default: 0.3). parameter controls tightly UMAP allowed pack points together. Lower values allow points closer together, higher values force points spread . n_components Integer. Number UMAP components compute (default: 2). determines dimensionality output embedding. verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run UMAP dimensionality reduction — run_umap","text":"Seurat object UMAP coordinates added reductions slot.   UMAP coordinates can accessed using: seurat_obj@reductions$umap - UMAP reduction object seurat_obj@reductions$umap@cell.embeddings - UMAP coordinates","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_umap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run UMAP dimensionality reduction — run_umap","text":"function performs following steps: Checks PCA run, runs necessary Performs UMAP using first 30 principal components Stores results Seurat object UMAP algorithm: Constructs high dimensional graph data Optimizes low dimensional layout preserve graph structure Can capture local global structure data","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/run_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run UMAP dimensionality reduction — run_umap","text":"","code":"# Example with mock Seurat object library(Seurat) # Create minimal mock data counts <- matrix(rpois(1000, 5), nrow = 100) rownames(counts) <- paste0(\"Gene\", seq_len(100)) colnames(counts) <- paste0(\"Cell\", seq_len(10)) seurat_obj <- CreateSeuratObject(counts = counts) #> Warning: Data is of class matrix. Coercing to dgCMatrix. seurat_obj <- NormalizeData(seurat_obj, verbose = FALSE) seurat_obj <- FindVariableFeatures(seurat_obj, verbose = FALSE) seurat_obj <- ScaleData(seurat_obj, verbose = FALSE) seurat_obj <- RunPCA(seurat_obj, npcs = 5, verbose = FALSE) #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead.  # Run UMAP seurat_with_umap <- run_umap(seurat_obj, n_components = 2, n_neighbors = 5) #> Running UMAP... #> Error in value[[3L]](cond): Error running UMAP: subscript out of bounds"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Save R object to file — save_object","title":"Save R object to file — save_object","text":"Saves R object file error handling directory creation.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save R object to file — save_object","text":"","code":"save_object(object, file_path, compress = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save R object to file — save_object","text":"object R object save. file_path Character string specifying file path. compress Logical indicating whether compress file. Default TRUE.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save R object to file — save_object","text":"Invisible NULL. object saved specified file path. function returns file path invisibly.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save R object to file — save_object","text":"function performs following steps: Creates directory exist Saves object using saveRDS() Handles errors informative messages function useful : Saving Seurat objects Saving analysis results Saving intermediate data function ensures: directory exists saving Errors caught reported Files compressed default","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save R object to file — save_object","text":"","code":"save_object(seurat_object, \"./results/seurat_object.rds\") #> Error in value[[3L]](cond): Failed to save object to ./results/seurat_object.rds: object 'seurat_object' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_visualization_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Save visualization plots — save_visualization_plots","title":"Save visualization plots — save_visualization_plots","text":"Saves multiple visualization plots specified directory.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_visualization_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save visualization plots — save_visualization_plots","text":"","code":"save_visualization_plots(   seurat_object,   evaluation_results,   output_dir,   prefix = \"plot\",   color_palette = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_visualization_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save visualization plots — save_visualization_plots","text":"seurat_object Seurat object containing analysis results. evaluation_results List containing evaluation results evaluate_predictions(). output_dir Character string specifying directory save plots. prefix Character string prefix plot filenames. Default \"plot\". color_palette Character vector. Colors use plots (default: NULL, uses default palette). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_visualization_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save visualization plots — save_visualization_plots","text":"NULL. Plots saved specified directory.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_visualization_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save visualization plots — save_visualization_plots","text":"function automates process creating saving multiple visualization plots scCulturePredict analysis results. generates complete set standard visualizations saves specified directory consistent naming. function creates saves following plots: UMAP plot: Visualization cells reduced dimensional space Direct accuracy plot: Bar plot direct similarity prediction accuracy SVM accuracy plot: Bar plot SVM prediction accuracy Direct confusion matrix: Heatmap confusion matrix direct predictions SVM confusion matrix: Heatmap confusion matrix SVM predictions workflow consists : Validating input parameters Creating output directory exist Generating visualization plot using corresponding functions Saving plot PNG file specified prefix Providing progress messages verbose TRUE plots use consistent formatting color palette (provided), ensuring visual coherence across saved visualizations. prefix parameter allows organizing multiple analysis runs giving distinct filenames. function includes robust error handling file system operations plot creation, informative error messages step fails.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/save_visualization_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save visualization plots — save_visualization_plots","text":"","code":"# Example saving plots to temporary directory # Create some example plots library(ggplot2) temp_dir <- tempdir()  # Create a list of plots plots_list <- list(     scatter = ggplot(mtcars, aes(x = mpg, y = wt)) +         geom_point() +         ggtitle(\"Scatter Plot\"),     histogram = ggplot(mtcars, aes(x = mpg)) +         geom_histogram(bins = 10) +         ggtitle(\"Histogram\"),     boxplot = ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +         geom_boxplot() +         ggtitle(\"Box Plot\") )  # Save the plots save_visualization_plots(     plots_list,     output_dir = temp_dir,     prefix = \"example\" ) #> Error in save_visualization_plots(plots_list, output_dir = temp_dir, prefix = \"example\"): seurat_object must be a Seurat object  # Check that files were created plot_files <- list.files(temp_dir, pattern = \"example.*\\\\.png$\") print(plot_files) #> character(0)  # Clean up unlink(file.path(temp_dir, plot_files))"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulture.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-Cell Culture Media Prediction Pipeline — scCulture","title":"Single-Cell Culture Media Prediction Pipeline — scCulture","text":"Runs complete scCulturePredict analysis pipeline two modes: \"build\" generate fingerprints labeled training data, \"predict\" apply existing fingerprints new unlabeled data cell culture media prediction.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single-Cell Culture Media Prediction Pipeline — scCulture","text":"","code":"scCulture(   data_dir,   kegg_file = NULL,   output_dir,   mode = \"build\",   fingerprint_file = NULL,   experiment_id = \"experiment\",   use_shell_script = TRUE,   perform_tsne = TRUE,   progress = FALSE,   parallel = FALSE,   n_cores = NULL,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single-Cell Culture Media Prediction Pipeline — scCulture","text":"data_dir Character string specifying directory containing data files. kegg_file Character string specifying path KEGG pathway file. Required \"build\" mode, optional \"predict\" mode fingerprint_file contains KEGG data. output_dir Character string specifying directory output files. mode Character string specifying analysis mode. Either \"build\" (generate fingerprints labeled data) \"predict\" (apply existing fingerprints unlabeled data). Default \"build\". fingerprint_file Character string specifying path saved fingerprint/model file. Required \"predict\" mode, ignored \"build\" mode. experiment_id Character string specifying experiment ID prefix filenames. Default \"experiment\". use_shell_script Logical indicating whether use shell script file preparation. Default TRUE. perform_tsne Logical indicating whether perform t-SNE. Default TRUE. progress Logical indicating whether show progress bar. Default FALSE. parallel Logical indicating whether use parallel processing. Default FALSE. n_cores Integer specifying number cores use parallel processing. Default NULL (uses available cores). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single-Cell Culture Media Prediction Pipeline — scCulture","text":"list containing: seurat_object: processed Seurat object UMAP coordinates predictions pathway_results: Results KEGG pathway analysis (build mode) fingerprint data (predict mode) prediction_results: Results similarity SVM prediction analysis evaluation_results: Results prediction evaluation (build mode) prediction confidence (predict mode) fingerprint_file: Path saved fingerprint file (build mode )","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single-Cell Culture Media Prediction Pipeline — scCulture","text":"scCulture function operates two distinct modes: **Build Mode** (mode = \"build\"): Generates transferable fingerprints labeled training data: Validates input parameters file existence Creates output directory exist Loads preprocesses labeled single-cell data Performs dimensionality reduction (PCA, UMAP, optionally t-SNE) Parses KEGG pathways builds transcriptomic fingerprints Trains similarity-based SVM models Evaluates model performance cross-validation Saves fingerprints models future predictions Creates publication-ready visualizations saves results **Predict Mode** (mode = \"predict\"): Applies existing fingerprints predict unlabeled data: Validates input parameters loads fingerprint file Loads preprocesses unlabeled single-cell data Performs dimensionality reduction consistent training data Applies pre-built fingerprints new data Makes predictions using trained similarity SVM models Calculates prediction confidence scores Creates prediction visualizations pipeline integrates several key analytical components: Data loading preprocessing using Seurat framework Dimensionality reduction using PCA, UMAP, optional t-SNE KEGG pathway analysis biological interpretation Dual prediction approaches: similarity-based machine learning (SVM) Comprehensive evaluation statistical testing Professional visualization suite customizable plots Progress tracking options: progress = TRUE: Shows detailed progress bar completion percentages verbose = TRUE: Displays step--step progress messages parallel = TRUE: Enables parallel processing intensive computations Output files automatically saved output_dir: seurat_object.rds: Complete Seurat object analysis results pathway_results.rds: KEGG pathway analysis results prediction_results.rds: Similarity SVM prediction results evaluation_results.rds: Performance evaluation metrics umap_plots.pdf: UMAP visualization plots evaluation_plots.pdf: Prediction performance plots","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single-Cell Culture Media Prediction Pipeline — scCulture","text":"","code":"# Build mode - generate fingerprints from labeled training data training_results <- scCulture(     data_dir = \"./DATA_labeled\",     kegg_file = \"sce00001.keg\",     output_dir = \"./training_results\",     mode = \"build\" ) #> Error in scCulture(data_dir = \"./DATA_labeled\", kegg_file = \"sce00001.keg\",     output_dir = \"./training_results\", mode = \"build\"): Data directory not found: ./DATA_labeled  # Access training results fingerprint_file <- training_results$fingerprint_file #> Error: object 'training_results' not found training_accuracy <- training_results$evaluation_results$overall_accuracy #> Error: object 'training_results' not found  # Predict mode - apply fingerprints to new unlabeled data prediction_results <- scCulture(     data_dir = \"./DATA_unlabeled\",     output_dir = \"./prediction_results\",     mode = \"predict\",     fingerprint_file = fingerprint_file ) #> Error in scCulture(data_dir = \"./DATA_unlabeled\", output_dir = \"./prediction_results\",     mode = \"predict\", fingerprint_file = fingerprint_file): Data directory not found: ./DATA_unlabeled  # Access predictions predictions <- prediction_results$seurat_object$classification_pred #> Error: object 'prediction_results' not found confidence_scores <- prediction_results$seurat_object$prediction_confidence #> Error: object 'prediction_results' not found  # Advanced usage with progress tracking and parallel processing results <- scCulture(     data_dir = \"./DATA_edit\",     kegg_file = \"sce00001.keg\",     output_dir = \"./results\",     mode = \"build\",     experiment_id = \"my_experiment\",     progress = TRUE,     parallel = TRUE,     verbose = TRUE ) #> Error in scCulture(data_dir = \"./DATA_edit\", kegg_file = \"sce00001.keg\",     output_dir = \"./results\", mode = \"build\", experiment_id = \"my_experiment\",     progress = TRUE, parallel = TRUE, verbose = TRUE): Data directory not found: ./DATA_edit"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"scCulturePredict package provides dual functionality analyzing single-cell RNA sequencing data predict cell culture media conditions. main function scCulture operates two modes: \"build\" generate transferable transcriptomic fingerprints labeled training data, \"predict\" apply fingerprints unlabeled datasets. Individual functions available data loading, preprocessing, KEGG pathway analysis, prediction using similarity-based machine learning approaches.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"package offers two primary workflows: **Build Mode** (mode = \"build\"): Generate transferable fingerprints labeled training data Train similarity-based SVM prediction models Evaluate model performance cross-validation Save fingerprints models future use **Predict Mode** (mode = \"predict\"): Apply pre-built fingerprints unlabeled datasets Make culture media predictions using trained models Calculate prediction confidence scores Generate prediction-specific visualizations **Core Functionalities**: Data loading support CSV 10X Genomics formats Preprocessing including normalization dimensionality reduction KEGG pathway analysis transcriptomic fingerprint generation Dual prediction approaches: similarity-based SVM machine learning Comprehensive evaluation visualization tools users, recommended approach use scCulture function handles build predict workflows single function call.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"main-pipeline","dir":"Reference","previous_headings":"","what":"Main Pipeline","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"scCulture function provides dual-mode functionality: **Build Mode Pipeline**: Loads preprocesses labeled training data Performs dimensionality reduction (PCA, UMAP, optional t-SNE) Conducts KEGG pathway analysis builds fingerprints Trains similarity-based SVM prediction models Evaluates model performance comprehensive metrics Saves transferable fingerprints trained models Creates training evaluation visualizations **Predict Mode Pipeline**: Loads pre-built fingerprints trained models Loads preprocesses unlabeled target data Applies fingerprints generate pathway profiles Makes predictions using trained models Calculates prediction confidence scores Creates prediction-specific visualizations Saves prediction results confidence metrics","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"data-loading","dir":"Reference","previous_headings":"","what":"Data Loading","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"load_data function provides robust data loading capabilities: Supports shell script R-based file preparation Automatic handling malformed input files Seamless integration Seurat objects","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"preprocessing","dir":"Reference","previous_headings":"","what":"Preprocessing","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"preprocessing functions (preprocess_data, reduce_dimensions) handle data normalization dimensionality reduction.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"kegg-analysis","dir":"Reference","previous_headings":"","what":"KEGG Analysis","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"KEGG pathway analysis performed using parse_kegg_keg build_fingerprints functions.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"prediction","dir":"Reference","previous_headings":"","what":"Prediction","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"Cell type/state prediction can done using either similarity-based (predict_by_similarity) SVM-based (predict_by_svm) approaches.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"evaluation","dir":"Reference","previous_headings":"","what":"Evaluation","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"Results can evaluated visualized using evaluate_predictions, create_evaluation_plots, create_evaluation_metrics_plot functions.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/scCulturePredict-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scCulturePredict: Single-Cell Culture Media Prediction Package — scCulturePredict-package","text":"Name <.email@example.com>","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/train_cell_type_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Train cell type classifier — train_cell_type_classifier","title":"Train cell type classifier — train_cell_type_classifier","text":"Trains classifier predict cell types based pathway activity patterns. function takes Seurat object known cell types pathway activity data, returns trained classifier.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/train_cell_type_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train cell type classifier — train_cell_type_classifier","text":"","code":"train_cell_type_classifier(   seurat_object,   pathway_activity,   cell_type_col = \"cell_type\",   method = \"rf\",   n_features = 100,   cv_folds = 5,   verbose = TRUE )"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/train_cell_type_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train cell type classifier — train_cell_type_classifier","text":"seurat_object Seurat object containing gene expression data cell type labels. pathway_activity Matrix. Pathway activity matrix rows pathways columns cells. cell_type_col Character. Name metadata column containing cell type labels (default: \"cell_type\"). method Character. Classification method use. Options \"rf\" (Random Forest), \"svm\" (Support Vector Machine), \"xgb\" (XGBoost) (default: \"rf\"). n_features Integer. Number top pathways use classification (default: 100). cv_folds Integer. Number cross-validation folds (default: 5). verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/train_cell_type_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train cell type classifier — train_cell_type_classifier","text":"trained classifier object following components: model: trained classification model feature_importance: Data frame pathway importance scores cv_performance: Cross-validation performance metrics training_params: List training parameters used","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/train_cell_type_classifier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train cell type classifier — train_cell_type_classifier","text":"function trains machine learning classifier predict cell types using pathway activity patterns features. supports multiple classification methods implements complete training workflow including feature selection, cross-validation, model training. function supports three classification methods: \"rf\": Random Forest - ensemble method using multiple decision trees \"svm\": Support Vector Machine - powerful classifier finds optimal boundaries \"xgb\": XGBoost - gradient boosting framework known performance accuracy workflow includes: Extensive input validation ensure data quality compatibility Extraction cell type labels specified metadata column Feature importance calculation identify predictive pathways Selection top n_features pathways based importance k-fold cross-validation assess model performance (using cv_folds) Training final model complete dataset Compilation results including model, feature importance, performance metrics Feature selection helps reduce dimensionality focuses model informative pathways, can improve performance interpretability. Cross-validation provides robust estimate model performance unseen data. function includes comprehensive error handling step workflow, informative error messages help diagnose issues arise training.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/train_cell_type_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train cell type classifier — train_cell_type_classifier","text":"","code":"# Example with mock data # Create mock pathway activity matrix set.seed(123) n_cells <- 60 n_pathways <- 10  pathway_activity <- matrix(     c(         rnorm(20 * n_pathways, mean = 1, sd = 0.5), # TypeA pattern         rnorm(20 * n_pathways, mean = -1, sd = 0.5), # TypeB pattern         rnorm(20 * n_pathways, mean = 0, sd = 0.5) # TypeC pattern     ),     nrow = n_cells,     ncol = n_pathways,     byrow = TRUE )  rownames(pathway_activity) <- paste0(\"Cell\", seq_len(n_cells)) colnames(pathway_activity) <- paste0(\"Pathway\", seq_len(n_pathways))  # Create labels labels <- factor(rep(c(\"TypeA\", \"TypeB\", \"TypeC\"), each = 20))  # Train classifier classifier <- train_cell_type_classifier(     pathway_activity,     labels,     method = \"svm\",     cross_validate = FALSE # Disable CV for speed ) #> Error in train_cell_type_classifier(pathway_activity, labels, method = \"svm\",     cross_validate = FALSE): unused argument (cross_validate = FALSE)  # Check model print(classifier$method) #> Error: object 'classifier' not found print(table(classifier$predictions, labels)) #> Error: object 'classifier' not found"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_and_fix_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and fix malformed input files — validate_and_fix_file","title":"Validate and fix malformed input files — validate_and_fix_file","text":"Checks malformed input files (e.g., files \"x\" first row) fixes .","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_and_fix_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and fix malformed input files — validate_and_fix_file","text":"","code":"validate_and_fix_file(file_path, sep = \"\\t\", header = TRUE, verbose = TRUE)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_and_fix_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and fix malformed input files — validate_and_fix_file","text":"file_path Character string specifying path file validate sep Character string specifying field separator header Logical indicating whether file header verbose Logical. Whether print progress messages (default: TRUE).","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_and_fix_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate and fix malformed input files — validate_and_fix_file","text":"data frame corrected data","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_and_fix_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate and fix malformed input files — validate_and_fix_file","text":"","code":"# Example with temporary file tmp_file <- tempfile(fileext = \".csv\") write.csv(iris[1:5, ], tmp_file, row.names = FALSE) result <- validate_and_fix_file(tmp_file) #> Error in validate_and_fix_file(tmp_file): could not find function \"validate_and_fix_file\" print(result) #> Error: object 'result' not found unlink(tmp_file)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate file exists — validate_file","title":"Validate file exists — validate_file","text":"Validates file exists readable.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate file exists — validate_file","text":"","code":"validate_file(file_path, extension = NULL)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate file exists — validate_file","text":"file_path Character string specifying file path. extension Character string specifying expected file extension. NULL, extension check performed. Default NULL.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate file exists — validate_file","text":"Logical value indicating whether file valid.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate file exists — validate_file","text":"function performs following checks: Validates file existence using file.exists() Optionally checks file extension Verifies file readability using file.access() function useful : Input validation File processing Error handling function ensures: File exists File correct extension (specified) File readable Informative warning messages","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/reference/validate_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate file exists — validate_file","text":"","code":"validate_file(\"data.csv\", extension = \"csv\") #> Warning: File not found: data.csv #> [1] FALSE"},{"path":[]},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"critical-fixes-0-99-2","dir":"Changelog","previous_headings":"Bug Fixes and Improvements","what":"Critical Fixes","title":"scCulturePredict 0.99.2 (2025-07-31)","text":"Fixed syntax error train_cell_type_classifier function seq_len(min)(n_features, nrow(feature_importance)) incorrectly parenthesized Fixed vapply() calls build_fingerprints calculate_pathway_activities functions changing lapply() variable-length outputs Restored accidentally removed F1 score calculation block evaluate_cell_type_predictions function","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"bioccheck-improvements-0-99-2","dir":"Changelog","previous_headings":"Bug Fixes and Improvements","what":"BiocCheck Improvements","title":"scCulturePredict 0.99.2 (2025-07-31)","text":"Achieved 0 ERRORS status BiocCheck validation, ensuring GitHub Actions compatibility Improved code indentation compliance using styler package (reduced 12% 5% non-compliant lines)","code":""},{"path":[]},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"bioccheck-compliance-0-99-1","dir":"Changelog","previous_headings":"Bug Fixes and Improvements","what":"BiocCheck Compliance","title":"scCulturePredict 0.99.1 (2025-07-04)","text":"Fixed 1:n patterns examples, replaced seq_len() Bioconductor compliance Fixed code indentation issues using styler package (reduced 11% 7% non-compliant lines) Added BiocCheck output folder pattern .Rbuildignore prevent build errors Achieved 0 ERRORS BiocCheck validation","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"code-improvements-0-99-1","dir":"Changelog","previous_headings":"Bug Fixes and Improvements","what":"Code Improvements","title":"scCulturePredict 0.99.1 (2025-07-04)","text":"Corrected SVM column name handling predict_by_svm() function Removed temporary helper scripts used development Updated documentation properly formatted examples","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"known-issues-0-99-1","dir":"Changelog","previous_headings":"Bug Fixes and Improvements","what":"Known Issues","title":"scCulturePredict 0.99.1 (2025-07-04)","text":"DESCRIPTION file date correction: Version 0.99.0 erroneously dated 2024-04-28 DESCRIPTION file instead correct date 2025-06-20. corrected version 0.99.1.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"initial-release-0-99-0","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"excited announce first release scCulturePredict, R package predicting cell culture media conditions single-cell transcriptomic data using transferable transcriptomic fingerprints. package case-study appropriate handling complex scrits via single function (.e. scCulture()) several parameters lead different functionalities: allows easy--use data analysis.","code":""},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"dual-mode-functionality-0-99-0","dir":"Changelog","previous_headings":"Key Features","what":"Dual-Mode Functionality","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"Train prediction models using KEGG pathway analysis Create portable fingerprint files future use Evaluate model performance comprehensive metrics Make culture media predictions new single-cell data lack information Calculate prediction confidence scores","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"main-functions-0-99-0","dir":"Changelog","previous_headings":"Key Features","what":"Main Functions","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"scCulture(): Complete analysis pipeline dual-mode functionality (.e. BUILD, PREDICT) plot_scCulture(): Visualisation results automatic identification mode used scCulture() generate appropriate plots","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"data-integration-0-99-0","dir":"Changelog","previous_headings":"Key Features","what":"Data Integration","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"Support CSV 10X Genomics data formats Seamless integration Seurat workflows Robust preprocessing quality control Dimensionality reduction PCA, UMAP, t-SNE","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"installation-0-99-0","dir":"Changelog","previous_headings":"","what":"Installation","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"","code":"# Install from GitHub devtools::install_github(\"NCMBianchi/scCulturePredict\")  # Load the package library(scCulturePredict)"},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"quick-start-0-99-0","dir":"Changelog","previous_headings":"","what":"Quick Start","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"","code":"# BUILD mode - create fingerprints from labeled data build_results <- scCulture(   data_dir = \"path/to/training/data\",   kegg_file = \"path/to/kegg/file\",   output_dir = \"fingerprint_output\",   mode = \"build\" )  # PREDICT mode - apply fingerprints to new data predict_results <- scCulture(   data_dir = \"path/to/new/data\",   fingerprint_file = build_results$fingerprint_file,   output_dir = \"prediction_output\",   mode = \"predict\" )  # Automatic visualization (returns both plots for PREDICT mode) plots <- plot_scCulture(predict_results) print(plots$predictions)  # Culture medium predictions print(plots$confidence)   # Prediction confidence scores"},{"path":[]},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"prediction-methods-0-99-0","dir":"Changelog","previous_headings":"Important Notes","what":"Prediction Methods","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"package uses two complementary prediction approaches: - Similarity-based prediction: Robust correlation-based matching - Support Vector Machine (SVM): Advanced classification data permits","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"known-behavior-0-99-0","dir":"Changelog","previous_headings":"Important Notes","what":"Known Behavior","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"SVM Automatic Fallback: SVM prediction encounters feature mismatches training prediction datasets, package automatically falls back similarity-based predictions user notification. ensures reliable predictions even datasets different characteristics.","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"technical-requirements-0-99-0","dir":"Changelog","previous_headings":"","what":"Technical Requirements","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"R >= 4.1.0 Seurat >= 4.0.0 (compatible Seurat v5) Core packages: dplyr, ggplot2, tidyverse, MASS, e1071, caret Additional: patchwork, methods, parallel, doParallel, foreach, stats, utils, tools","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"performance-considerations-0-99-0","dir":"Changelog","previous_headings":"","what":"Performance Considerations","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"Tested dataset: 811 cells, 4673 genes Processing time: ~20-30 seconds BUILD PREDICT modes Performance may vary dataset size complexity Best results datasets good gene coverage matching KEGG pathways","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"support-0-99-0","dir":"Changelog","previous_headings":"","what":"Support","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"Documentation: Use ?scCulture ?plot_scCulture detailed help Issues: Report problems https://github.com/NCMBianchi/scCulturePredict/issues Contact: ncmb89@gmail.com","code":""},{"path":"https://NCMBianchi.github.io/scCulturePredict/news/index.html","id":"citation-0-99-0","dir":"Changelog","previous_headings":"","what":"Citation","title":"scCulturePredict 0.99.0 (2025-06-20)","text":"use scCulturePredict research, please cite: Bianchi, N. (2025). scCulturePredict: Single-Cell Culture Media Prediction Using Transcriptomic Fingerprints. R package version 0.99.0.","code":""}]
