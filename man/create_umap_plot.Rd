% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualization.R
\name{create_umap_plot}
\alias{create_umap_plot}
\title{Create UMAP visualization}
\usage{
create_umap_plot(
  seurat_object,
  color_by = "sample",
  point_size = 0.8,
  title = "UMAP Visualization",
  legend_title = NULL,
  verbose = TRUE
)
}
\arguments{
\item{seurat_object}{A Seurat object containing UMAP coordinates in metadata.}

\item{color_by}{Character string specifying the metadata column to color points by.
Default is "sample".}

\item{point_size}{Numeric value for point size. Default is 0.8.}

\item{title}{Character string for plot title. Default is "UMAP Visualization".}

\item{legend_title}{Character string for legend title. Default is NULL (uses color_by).}

\item{verbose}{Logical. Whether to print progress messages (default: TRUE).}
}
\value{
A ggplot object containing the UMAP visualization.
}
\description{
Creates a UMAP plot of the single-cell data with customizable aesthetics.
}
\details{
This function generates a UMAP (Uniform Manifold Approximation and Projection)
visualization from a Seurat object. It requires that UMAP coordinates are
already computed and stored in the metadata as "UMAP_1" and "UMAP_2".

The function performs the following steps:
\enumerate{
  \item Validates input parameters to ensure they meet requirements
  \item Checks for the presence of UMAP coordinates in the metadata
  \item Creates a ggplot object with UMAP coordinates
  \item Customizes the plot appearance based on provided parameters
  \item Returns the plot for further customization or direct display
}

The returned ggplot object can be further customized using standard ggplot2
functions and themes. For example, you can add additional layers, change
color scales, or modify themes.

Error handling ensures that invalid inputs are caught early with informative
error messages, making the function robust for interactive and programmatic use.
}
\examples{
# Example saving plots to temporary directory
temp_dir <- tempdir()
plots_list <- list(
    plot1 = ggplot2::ggplot(mtcars, ggplot2::aes(x = mpg, y = wt)) +
        ggplot2::geom_point(),
    plot2 = ggplot2::ggplot(iris, ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +
        ggplot2::geom_point()
)
save_visualization_plots(plots_list, output_dir = temp_dir)
# Clean up
unlink(file.path(temp_dir, "*.png"))
}
